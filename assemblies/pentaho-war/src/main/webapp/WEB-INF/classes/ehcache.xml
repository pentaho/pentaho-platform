<config xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
        xmlns='http://www.ehcache.org/v3'
        xsi:schemaLocation="http://www.ehcache.org/v3 http://www.ehcache.org/schema/ehcache-core-3.0.xsd">
    <!-- Sets the path to the directory where cache .data files are created.

         If the path is a Java System Property it is replaced by
         its value in the running VM.

         The following properties are translated:
         user.home - User's home directory
         user.dir - User's current working directory
         java.io.tmpdir - Default temp file path -->
    <!--<diskStore path="user.home/.pentaho/caches/ehcache"/>-->

    <!--Default Cache configuration. These will applied to caches programmatically created through
        the CacheManager.

        The following attributes are required:

        maxElementsInMemory            - Sets the maximum number of objects that will be created in memory
        eternal                        - Sets whether elements are eternal. If eternal,  timeouts are ignored and the
                                         element is never expired.
        overflowToDisk                 - Sets whether elements can overflow to disk when the in-memory cache
                                         has reached the maxInMemory limit.

        The following attributes are optional:
        timeToIdleSeconds              - Sets the time to idle for an element before it expires.
                                         i.e. The maximum amount of time between accesses before an element expires
                                         Is only used if the element is not eternal.
                                         Optional attribute. A value of 0 means that an Element can idle for infinity.
                                         The default value is 0.
        timeToLiveSeconds              - Sets the time to live for an element before it expires.
                                         i.e. The maximum time between creation time and when an element expires.
                                         Is only used if the element is not eternal.
                                         Optional attribute. A value of 0 means that and Element can live for infinity.
                                         The default value is 0.
        diskPersistent                 - Whether the disk store persists between restarts of the Virtual Machine.
                                         The default value is false.
        diskExpiryThreadIntervalSeconds- The number of seconds between runs of the disk expiry thread. The default value
                                         is 120 seconds.
        -->

    <!--<defaultCache
            maxElementsInMemory="1000"
            eternal="false"
            overflowToDisk="false"
            timeToIdleSeconds="0"
            timeToLiveSeconds="0"
            diskPersistent="false"
            diskExpiryThreadIntervalSeconds="120"
    />-->

    <cache alias="pentahoCache">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">15000</heap>
            <offheap unit="MB">100</offheap>
        </resources>
    </cache>

    <cache alias="libloader-data">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">1000</heap>
            <offheap unit="MB">100</offheap>
        </resources>
    </cache>

    <cache alias="libloader-bundles">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">100</heap>
        </resources>
    </cache>

    <cache alias="libloader-factory">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">1000</heap>
        </resources>
    </cache>

    <cache alias="mondrian-catalog-cache">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">30</heap>
        </resources>
    </cache>


    <!--
      Defines a cache used by the reporting engine to hold small datasets.
      This cache can be configured to have a separate instance for each logged in user via the
      global report configuration. This per-user cache is required if role or other security and
      filter information is used in ways invisible for the reporting engine.
    -->
    <cache alias="report-dataset-cache">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">50</heap>
        </resources>
    </cache>

    <!--
       Defines a cache used by the reporting plugin to hold paginated report objects.
       Warning: These report keep their connections open as long as the report object
       lives in the cache. This cache exists on a per-user basis. Keep it reasonably
       small to not exhaust your resources.
    -->
    <cache alias="report-output-handlers">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">10</heap>
        </resources>
    </cache>
    <!-- Repository File Entity caching below. These are used by the Hibernate 2nd-level cache when using the ehCache provider. -->
    <cache alias="org.pentaho.platform.repository.solution.dbbased.RepositoryFile">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">10000</heap>
        </resources>
    </cache>

    <cache alias="org.pentaho.platform.repository.solution.dbbased.RepositoryFile.childrenFiles">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">10000</heap>
        </resources>
    </cache>

    <cache alias="org.pentaho.platform.repository.solution.dbbased.RepositoryFile.accessControls">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">10000</heap>
        </resources>
    </cache>

    <cache alias="pentaho-geo-country">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">1000</heap>
        </resources>
    </cache>

    <cache alias="pentaho-geo-countrycode">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">5000</heap>
        </resources>
    </cache>

    <cache alias="pentaho-geo-countrycode3">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">5000</heap>
        </resources>
    </cache>

    <cache alias="pentaho-geo-countrysubdivision">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">5000</heap>
        </resources>
    </cache>

    <cache alias="pentaho-geo-countrysubdivisioncode">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">5000</heap>
        </resources>
    </cache>

    <cache alias="pentaho-geo-countrysecondarysubdivision">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">5000</heap>
        </resources>
    </cache>

    <cache alias="pentaho-geo-postalcode">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">50000</heap>
        </resources>
    </cache>
    <cache alias="pentaho-geo-municipality">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">700000</heap>
        </resources>
    </cache>
    <!-- When creating a custom geographic role that exceeds 1000 elements use this template -->
    <!--
      <cache
          name="pentaho-geo-{CUSTOM_ROLE_TYPE}"
          maxEntriesLocalHeap="50000"
          eternal="false"
          overflowToDisk="false"
          timeToIdleSeconds="0"
          timeToLiveSeconds="0"
          diskPersistent="false">
        <pinning store="inCache" />
      </cache>
    -->

    <!-- Cache for the Spring CachingUserDetailsService -->
    <cache alias="userCache">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">2000</heap>
        </resources>
        <!-- Ehcache 3.x does not support timeToIdleSeconds and timeToLiveSeconds directly. You can use Expiry API instead -->

    </cache>

    <cache alias="userRoleListCache">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">2000</heap>
        </resources>
    </cache>

    <cache alias="principalProviderRoleCache">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">512</heap>
        </resources>
    </cache>

    <cache alias="principalProviderUserCache">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">4092</heap>
        </resources>
    </cache>

    <!-- Caches for the PentahoCachingLdap* classes. Only enable if they are in use. -->
    <!--
    <cache
        name="ldapPopulatorCache"
        maxEntriesLocalHeap="2000"
        eternal="false"
        overflowToDisk="false"
        timeToIdleSeconds="300"
        timeToLiveSeconds="600"
        diskPersistent="false"/>
    <cache
        name="ldapAuthenticatorCache"
        maxEntriesLocalHeap="2000"
        eternal="false"
        overflowToDisk="false"
        timeToIdleSeconds="300"
        timeToLiveSeconds="600"
        diskPersistent="false"/>
    -->

    <!-- Cache backing the CachingRepositoryFactory which creates PDI Repository instances in the platform -->
    <cache alias="pdi-repository-cache">
        <key-type>java.lang.Object</key-type>
        <value-type>java.lang.Object</value-type>
        <resources>
            <heap unit="entries">2000</heap>
        </resources>
    </cache>
</config>