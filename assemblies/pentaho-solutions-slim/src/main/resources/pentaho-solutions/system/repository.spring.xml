<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:pen="http://www.pentaho.com/schema/pentaho-system"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
                           http://www.pentaho.com/schema/pentaho-system http://www.pentaho.com/schema/pentaho-system.xsd"
       default-lazy-init="true">

  <bean class="org.pentaho.platform.config.SolutionPropertiesFileConfiguration">
    <constructor-arg value="repository"/>
    <constructor-arg value="repository.spring.properties"/>
    <pen:publish as-type="INTERFACES"/>
  </bean>

  <!--
    default-lazy-init makes all of the beans in this file lazy-init=true which means they are not instantiated until
    they are referenced; this allows PentahoSystem to be fully initialized (which is used internally in
    SpringSecurityLoginModule and SpringSecurityPrincipalProvider (pentaho-third-party-security project)
  -->

  <!-- An access decision manager used by the business objects. -->
  <bean id="businessAccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
    <constructor-arg>
      <list>
        <ref bean="authorizationPolicyVoter"/>
      </list>
    </constructor-arg>
    <property name="allowIfAllAbstainDecisions" value="false"/>
  </bean>

  <bean id="unifiedRepositoryTarget" class="org.pentaho.platform.repository2.unified.fs.FileSystemBackedUnifiedRepository">
	  <constructor-arg value="/data/repo"/>
  </bean>

  <!-- 
  	This bean is used by spring aop to add method level security to the real unified repository implementation.
  -->
  <bean id="unifiedRepositoryMethodInterceptor"
        class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
    <property name="validateConfigAttributes">
      <value>true</value>
    </property>
    <property name="authenticationManager">
      <ref bean="authenticationManager"/>
    </property>
    <property name="accessDecisionManager">
      <ref bean="businessAccessDecisionManager"/>
    </property>
    <property name="securityMetadataSource">
      <sec:method-security-metadata-source>
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileAtVersion" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileById" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForRead" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForReadInBatch" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataAtVersionForRead" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForExecute" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForExecuteInBatch" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataAtVersionForExecute" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.createFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.createFolder" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateFolder" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getChildren" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAcl" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.hasAccess" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getEffectiveAces" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateAcl" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.lockFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.unlockFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.canUnlockFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.restoreFileAtVersion" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummary" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummaryInBatch" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummaries" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteFileAtVersion" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.undeleteFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDeletedFiles" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDeletedFiles" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.moveFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.copyFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getTree" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getReferrers" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setFileMetadata" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileMetadata" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAvailableLocalesForFileById" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAvailableLocalesForFileByPath" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAvailableLocalesForFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getLocalePropertiesForFileById" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getLocalePropertiesForFileByPath" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getLocalePropertiesForFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setLocalePropertiesForFileById" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setLocalePropertiesForFileByPath" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setLocalePropertiesForFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteLocalePropertiesForFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
      </sec:method-security-metadata-source>
    </property>
  </bean>

  <!-- 
    This bean serves as a proxy for the real IUnifiedRepository. It uses spring aop to add transaction management
    and method level security on top of the real IUnifiedRepository implementation.
  -->
  <bean id="unifiedRepositoryProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="unifiedRepositoryTarget"/>
    <property name="interceptorNames">
      <list>
        <idref bean="unifiedRepositoryMethodInterceptor"/>
      </list>
    </property>
  </bean>

  <!-- 
    This bean is used by spring aop to add exception logging to the real unified repository implementation.
  -->
  <bean id="unifiedRepository" class="org.pentaho.platform.repository2.unified.ExceptionLoggingDecorator">
    <constructor-arg ref="unifiedRepositoryProxy"/>
    <constructor-arg>
      <util:map>
        <entry key="org.springframework.security.access.AccessDeniedException">
          <bean class="org.pentaho.platform.repository2.unified.exception.AccessDeniedExceptionConverter" />
        </entry>
        <entry key="org.pentaho.platform.repository2.unified.exception.RepositoryFileDaoFileExistsException">
          <bean class="org.pentaho.platform.repository2.unified.exception.FileExistsExceptionConverter" />
        </entry>
        <entry key="org.pentaho.platform.repository2.unified.exception.RepositoryFileDaoReferentialIntegrityException">
          <bean class="org.pentaho.platform.repository2.unified.exception.ReferentialIntegrityExceptionConverter" />
        </entry>
        <entry key="org.pentaho.platform.repository2.unified.exception.RepositoryFileDaoMalformedNameException">
          <bean class="org.pentaho.platform.repository2.unified.exception.MalformedNameExceptionConverter" />
        </entry>
      </util:map>
    </constructor-arg>
  </bean>

  <!-- The username to use to do internal work for no particular user. -->
  <!-- See Jackrabbit repository.xml adminId -->
  <bean id="repositoryAdminUsername" class="java.lang.String">
    <constructor-arg value="${repository.repositoryAdminUsername}"/>
    <pen:publish as-type="CLASSES"/>
  </bean>

  <!-- This token allows Jackrabbit to trust that this application has already authenticated the user. -->
  <bean id="jcrPreAuthenticationToken" class="java.lang.String">
    <constructor-arg value="ZchBOvP8q9FQ"/>
    <pen:publish as-type="CLASSES"/>
  </bean>

  <!-- The name of the authority which is granted to all authenticated users of a particular tenant. -->
  <bean id="singleTenantAuthenticatedAuthorityName" class="java.lang.String">
    <constructor-arg value="${repository.singleTenantAuthenticatedAuthorityName}"/>
    <pen:publish as-type="CLASSES"/>
  </bean>

  <!-- The name of the authority which is granted to all admin users of a particular tenant. -->
  <bean id="singleTenantAdminAuthorityName" class="java.lang.String">
    <constructor-arg value="${repository.singleTenantAdminAuthorityName}"/>
    <pen:publish as-type="CLASSES"/>
  </bean>

  <!-- The name of the authority which is granted to all non-authenticated users of a particular tenant -->
  <bean id="singleTenantAnonymousAuthorityName" class="java.lang.String">
    <constructor-arg value="${repository.singleTenantAnonymousAuthorityName}"/>
    <pen:publish as-type="CLASSES"/>
  </bean>

  <!-- The set of authorities that are considered system and cannot be removed -->
  <bean class="java.util.ArrayList" id="singleTenantSystemAuthorities">
     <constructor-arg>
      <util:list list-class="java.util.ArrayList" value-type="java.lang.String">
        <ref bean="singleTenantAuthenticatedAuthorityName" />
        <ref bean="singleTenantAdminAuthorityName" />
        <ref bean="singleTenantAnonymousAuthorityName" />
      </util:list>
     </constructor-arg>
     <pen:publish as-type="INTERFACES"/>
  </bean>

  <bean class="java.util.ArrayList" id="extraSystemAuthorities">
     <constructor-arg>
      <util:list list-class="java.util.ArrayList" value-type="java.lang.String">
        <ref bean="singleTenantAuthenticatedAuthorityName" />
        <ref bean="singleTenantAnonymousAuthorityName" />
      </util:list>
     </constructor-arg>
     <pen:publish as-type="INTERFACES"/>
  </bean>


  <bean id="superAdminAuthorityName" class="java.lang.String">
    <constructor-arg value="${repository.superAdminAuthorityName}"/>
    <pen:publish as-type="CLASSES"/>
  </bean>

  <bean id="superAdminUserName" class="java.lang.String">
    <constructor-arg value="${repository.superAdminUserName}"/>
    <pen:publish as-type="CLASSES"/>
  </bean>

  <bean id="systemTenantAdminUserName" class="java.lang.String">
    <constructor-arg value="${repository.systemTenantAdminUserName}"/>
    <pen:publish as-type="CLASSES"/>
  </bean>

  <bean id="systemTenantAdminPassword" class="java.lang.String">
    <constructor-arg value="${repository.systemTenantAdminPassword}"/>
    <pen:publish as-type="CLASSES"/>
  </bean>

  <bean id="singleTenantAdminUserName" class="java.lang.String">
    <constructor-arg value="${repository.singleTenantAdminUserName}"/>
    <pen:publish as-type="CLASSES"/>
  </bean>

  <!-- 
  	This bean is used to for controlling the whitelist of what can be downloaded without having ABS org.pentaho.security.publish
   -->
  <bean id="downloadWhitelist" class="org.pentaho.platform.repository.RepositoryDownloadWhitelist">
  	<property name="extensions" value="gif,jpg,jpeg,png,bmp,tiff,csv,xls,xlsx,pdf,txt,css,htm,html,js,xml,doc,ppt" />
  </bean>

  <!-- 
  	This bean is responsible for converting deriving a user's tenant and user name from a user id and visa-versa.
   -->
  <bean id="tenantedRoleNameUtils" class="org.pentaho.platform.security.userroledao.DefaultTenantedPrincipleNameResolver">
  	<property name="delimeter" value="_" />
  </bean>

  <!-- 
   This bean is responsible for converting deriving a role's tenant and user name from a user id and visa-versa.
  -->
  <bean id="tenantedUserNameUtils" class="org.pentaho.platform.security.userroledao.DefaultTenantedPrincipleNameResolver">
  </bean>

  <bean id="repositoryAccessVoterManager"
          class="org.pentaho.platform.repository2.unified.RepositoryAccessVoterManager">
      <constructor-arg ref="authorizationPolicy"/>
      <constructor-arg ref="repositoryAdminUsername"/>
  </bean>

  <!-- begin authorization policy -->

  <bean id="authorizationPolicy" class="org.pentaho.platform.security.policy.rolebased.AllowAllAuthorizationPolicy">
  </bean>

  <util:map id="immutableRoleBindingMap">
    <entry key-ref="singleTenantAdminAuthorityName">
	<pen:list class="org.pentaho.platform.api.engine.IAuthorizationAction"/> 
    </entry>
    <entry key-ref="superAdminAuthorityName">
	<pen:list class="org.pentaho.platform.api.engine.IAuthorizationAction"/> 
    </entry>
  </util:map>

  <util:map id="bootstrapRoleBindingMap">
    <entry key-ref="singleTenantAuthenticatedAuthorityName">
      <util:list>
        <value>org.pentaho.repository.read</value>
        <value>org.pentaho.repository.create</value>
        <value>org.pentaho.scheduler.manage</value>
      </util:list>
    </entry>
    <!-- for single tenant mode -->
  </util:map>

  <util:list id="singleTenantAuthenticatedAuthorityRoleBindingList">
       <value>org.pentaho.repository.read</value>
  </util:list>

  <!-- Built-In ABS Logical Roles -->
  <bean class="org.pentaho.platform.security.policy.rolebased.actions.RepositoryReadAction">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="50"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.security.policy.rolebased.actions.RepositoryCreateAction">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="40"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.security.policy.rolebased.actions.SchedulerAction">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="30"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.security.policy.rolebased.actions.AdministerSecurityAction">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="20"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.security.policy.rolebased.actions.PublishAction">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="0"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.repository2.DefaultClientRepositoryPathsStrategy">
    <pen:publish as-type="INTERFACES" />
  </bean>

  <!-- An access decision voter that reads VOTE_AUTHZ_POLICY_* configuration settings
-->
  <bean id="authorizationPolicyVoter"
        class="org.pentaho.platform.security.policy.rolebased.springsecurity.AuthorizationPolicyVoter">
    <constructor-arg ref="authorizationPolicy"/>
    <constructor-arg value="VOTE_AUTHZ_POLICY_"/>
  </bean>

  <!-- end authorization policy -->
  
  <!-- Set global versioning flag for DefaultRepositoryVersionManager -->
  <bean class="java.lang.Boolean" id="versioningEnabled">
    <constructor-arg value="${repository.versioningEnabled:false}"/>
    <pen:publish as-type="INTERFACES"/>
  </bean>

  <!-- Set global versioning flag for DefaultRepositoryVersionManager -->
  <bean class="java.lang.Boolean" id="versionCommentsEnabled">
    <constructor-arg value="${repository.versionCommentsEnabled:false}"/>
    <pen:publish as-type="INTERFACES"/>
  </bean>

  <!-- Property to enable of disable multi-byte encoding -->
  <bean class="java.lang.Boolean" id="useMultiByteEncoding">
    <constructor-arg value="${repository.useMultiByteEncoding}"/>
    <pen:publish as-type="INTERFACES"/>
  </bean>
</beans>
