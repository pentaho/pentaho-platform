<?xml version="1.0" encoding="UTF-8"?>
<!--
This is a Spring file that defines how Pentaho system objects are created and managed.
An implementation of IPentahoObjectFactory, such as WebSpringPentahoObjectFactory, is
responsible for serving objects to callers based on this file.

Possible values for scope attribute:
*singleton* - each request for this object returns the same instance
*prototype* - each request for this object returns a new instance
*session* - each request for this object within a session returns the same instance

default-lazy-init is set to true since some of these object make calls into
PentahoSystem which is initialized after Spring
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:pen="http://www.pentaho.com/schema/pentaho-system"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
       http://www.pentaho.com/schema/pentaho-system http://www.pentaho.com/schema/pentaho-system.xsd" default-lazy-init="true" >

  <bean id="ISolutionEngine" class="org.pentaho.platform.engine.services.solution.SolutionEngine" scope="prototype"/>
  <bean id="IAuditEntry" class="org.pentaho.platform.engine.services.audit.AuditFileEntry" scope="singleton"/>
  <bean id="IUITemplater" class="org.pentaho.platform.web.http.WebTemplateHelper" scope="singleton"/>
  <!-- Concrete implementation of IMetadataDomainRepository -->
  <bean id="IMetadataDomainRepositoryImpl"
        class="org.pentaho.platform.plugin.services.metadata.SecurityAwarePentahoMetadataDomainRepository" scope="singleton">
    <constructor-arg>
      <ref bean="unifiedRepository"/>
    </constructor-arg>
	</bean>
  <!-- Wrap the concrete IMetadataDomainRepository implementation with one that caches domains per session -->
  <bean id="IMetadataDomainRepository"
        class="org.pentaho.platform.plugin.services.metadata.SessionCachingMetadataDomainRepository" scope="singleton">
    <constructor-arg>
      <ref bean="IMetadataDomainRepositoryImpl"/>
    </constructor-arg>
  </bean>
  <!--  Use this schema factory to disable PMD security -->
  <!--  <bean id="IMetadataDomainRepository" class="org.pentaho.platform.plugin.services.metadata.CachingPentahoMetadataDomainRepository" scope="singleton"/>-->
  <bean id="IUserSettingService" class="org.pentaho.platform.repository.usersettings.UserSettingService">
      <constructor-arg ref="unifiedRepository"/>
  </bean>
  <bean id="IEmailService" class="org.pentaho.platform.plugin.services.email.EmailService" scope="session"/>
  <bean id="file" class="org.pentaho.platform.plugin.outputs.FileOutputHandler" scope="session"/>
  <bean id="contentrepo" class="org.pentaho.platform.repository2.unified.fileio.RepositoryContentOutputHandler"
        scope="session"/>
  <bean id="vfs-ftp" class="org.pentaho.platform.plugin.outputs.ApacheVFSOutputHandler" scope="session"/>
  <bean id="IAclVoter" class="org.pentaho.platform.engine.security.acls.voter.PentahoBasicAclVoter" scope="singleton"/>
  <bean id="IVersionHelper" class="org.pentaho.platform.util.VersionHelper" scope="singleton"/>
  <bean id="ICacheManager" class="org.pentaho.platform.plugin.services.cache.CacheManager" scope="singleton"/>
  <bean id="IConditionalExecution" class="org.pentaho.platform.plugin.condition.javascript.ConditionalExecution"
        scope="prototype"/>
  <bean id="IMessageFormatter" class="org.pentaho.platform.engine.services.MessageFormatter" scope="singleton"/>
  <!--
    IDBDatasourceService - options are:
    org.pentaho.platform.engine.services.connection.datasource.dbcp.JndiDatasourceService
    org.pentaho.platform.engine.services.connection.datasource.dbcp.NonPooledOrJndiDatasourceService
    org.pentaho.platform.engine.services.connection.datasource.dbcp.PooledDatasourceService
    org.pentaho.platform.engine.services.connection.datasource.dbcp.NonPooledDatasourceService
    org.pentaho.platform.engine.services.connection.datasource.dbcp.PooledOrJndiDatasourceService
    org.pentaho.platform.engine.services.connection.datasource.dbcp.DynamicallyPooledOrJndiDatasourceService (Default option)
  -->
  <bean id="pooledOrJndiDatasourceService" class="org.pentaho.platform.engine.services.connection.datasource.dbcp.PooledOrJndiDatasourceService" scope="singleton" />
  <bean id="nonPooledOrJndiDatasourceService" class="org.pentaho.platform.engine.services.connection.datasource.dbcp.NonPooledOrJndiDatasourceService" scope="singleton" />

  <bean id="IDBDatasourceService" class="org.pentaho.platform.engine.services.connection.datasource.dbcp.DynamicallyPooledOrJndiDatasourceService" scope="singleton">
    <property name="pooledDatasourceService" ref="pooledOrJndiDatasourceService" />
    <property name="nonPooledDatasourceService" ref="nonPooledOrJndiDatasourceService" />
  </bean>

  <bean id="IPasswordService" class="org.pentaho.platform.util.KettlePasswordService" scope="singleton"/>
  <bean id="IPluginProvider" class="org.pentaho.platform.plugin.services.pluginmgr.SystemPathXmlPluginProvider"
        scope="singleton"/>

  <bean id="IPluginManager" class="org.pentaho.platform.plugin.services.pluginmgr.PentahoSystemPluginManager"
        scope="singleton"/>
  <bean id="IPluginResourceLoader" class="org.pentaho.platform.plugin.services.pluginmgr.PluginResourceLoader"
        scope="singleton"/>
  <bean id="IPluginPerspectiveManager"
        class="org.pentaho.platform.plugin.services.pluginmgr.perspective.DefaultPluginPerspectiveManager"
        scope="singleton"/>
  <bean id="IServiceManager" class="org.pentaho.platform.plugin.services.pluginmgr.servicemgr.DefaultServiceManager"
        scope="singleton">
    <property name="serviceTypeManagers">
      <list>
        <ref bean="gwtServiceManager"/>
      </list>
    </property>
  </bean>
  <bean id="ITempFileDeleter" class="org.pentaho.platform.web.http.session.SessionTempFileDeleter" scope="prototype"/>
  <bean id="gwtServiceManager" class="org.pentaho.platform.plugin.services.pluginmgr.servicemgr.GwtRpcServiceManager"
        scope="singleton"/>
  <bean id="IChartBeansGenerator" class="org.pentaho.platform.plugin.action.chartbeans.DefaultChartBeansGenerator"
        scope="singleton"/>

  <!-- Data connections.  Connections objects should be accessed through PentahoConnectionFactory,
not directly from the PentahoObjectFactory. -->
  <bean id="connection-SQL" class="org.pentaho.platform.plugin.services.connections.sql.SQLConnection"
        scope="prototype">
    <property name="fallBackToNonscrollableOnError" value="true"/>
  </bean>
  <bean id="connection-MDX" class="org.pentaho.platform.plugin.services.connections.mondrian.MDXConnection"
        scope="prototype">
    <property name="useExtendedColumnNames" value="true"/>
  </bean>
  <bean id="connection-MDXOlap4j" class="org.pentaho.platform.plugin.services.connections.mondrian.MDXOlap4jConnection" scope="prototype" />
  <bean id="connection-XML" class="org.pentaho.platform.plugin.services.connections.xquery.XQConnection"
        scope="prototype"/>
  <bean id="connection-HQL" class="org.pentaho.platform.plugin.services.connections.hql.HQLConnection"
        scope="prototype"/>

  <!-- actual bean defined in repository.spring.xml; aliased here -->
  <alias name="unifiedRepository" alias="IUnifiedRepository"/>

  <!-- actual bean defined in repository.spring.xml; aliased here -->
  <alias name="backingRepositoryLifecycleManager" alias="IBackingRepositoryLifecycleManager"/>

  <!-- actual bean defined in repository.spring.xml; aliased here -->
  <alias name="authorizationPolicy" alias="IAuthorizationPolicy"/>

  <!-- actual bean defined in repository.spring.xml; aliased here -->
  <alias name="roleAuthorizationPolicyRoleBindingDaoTxn" alias="IRoleAuthorizationPolicyRoleBindingDao"/>

  <!-- Reference to a bean in one of the applicationContext-pentaho-security-*.xml; selected by configured provider-->
  <pen:bean id="activeUserRoleListService" class="org.pentaho.platform.api.engine.IUserRoleListService">
    <pen:attributes>
      <pen:attr key="providerName" value="${security.provider}"/>
    </pen:attributes>
  </pen:bean>

  <!-- The system must have access to the jackrabbit version even if another is configured. -->
  <pen:bean id="systemUserRoleListService" class="org.pentaho.platform.api.engine.IUserRoleListService">
    <pen:attributes>
      <pen:attr key="providerName" value="jackrabbit"/>
    </pen:attributes>
  </pen:bean>

  <!-- A composite bean composed of the activeUserRoleListService and systemUserRoleListService -->
  <bean id="IUserRoleListService" class="org.pentaho.platform.plugin.services.security.userrole.CompositeUserRoleListService">
    <constructor-arg>
      <list>
        <ref bean="activeUserRoleListService"/>
        <ref bean="systemUserRoleListService"/>
      </list>
    </constructor-arg>
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="50"/>
      </pen:attributes>
    </pen:publish>
  </bean>

  <!-- Reference to a bean in one of the applicationContext-pentaho-security-*.xml; selected by configured provider-->
  <pen:bean id="activeUserDetailsService" class="org.springframework.security.core.userdetails.UserDetailsService">
    <pen:attributes>
      <pen:attr key="providerName" value="${security.provider}"/>
    </pen:attributes>
  </pen:bean>

  <!-- The system must have access to the jackrabbit version even if another is configured. -->
  <pen:bean id="systemUserDetailsService" class="org.springframework.security.core.userdetails.UserDetailsService">
    <pen:attributes>
      <pen:attr key="providerName" value="jackrabbit"/>
    </pen:attributes>
  </pen:bean>

  <bean id="UserDetailsService" class="org.pentaho.platform.plugin.services.security.userrole.ChainedUserDetailsService">
    <constructor-arg>
      <list>
        <ref bean="activeUserDetailsService"/>
        <ref bean="systemUserDetailsService"/>
      </list>
    </constructor-arg>
  </bean>

  <bean id="RegionFactory" class="org.pentaho.platform.plugin.services.cache.HvCacheRegionFactory"/>

  <bean id="jCacheUserCache" class="org.pentaho.platform.plugin.services.security.userrole.PentahoJCacheBasedUserCache">
    <constructor-arg index="0" value="true" />
  </bean>

  <bean id="cachingUserDetailsService" class="org.pentaho.platform.plugin.services.security.userrole.PentahoCachingUserDetailsService">
    <constructor-arg>
      <ref bean="UserDetailsService"/>
    </constructor-arg>
    <constructor-arg ref="tenantedUserNameUtils"/>
    <property name="userCache" ref="jCacheUserCache"/>

    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="50"/>
      </pen:attributes>
    </pen:publish>

  </bean>


  <pen:bean class="org.springframework.security.authentication.AuthenticationProvider">
      <pen:attributes>
          <pen:attr key="providerName" value="${security.provider}"/>
      </pen:attributes>
      <pen:publish as-type="ALL">
          <pen:attributes>
              <pen:attr key="priority" value="50"/>
          </pen:attributes>
      </pen:publish>
  </pen:bean>

  <!-- actual bean defined in applicationContext-spring-security.xml; aliased here -->
  <alias name="authenticationManager" alias="AuthenticationManager"/>

    <bean id="IMondrianCatalogService" class="org.pentaho.platform.plugin.action.mondrian.catalog.MondrianCatalogHelper"
        scope="singleton"/>

    <bean id="IOlapService" class="org.pentaho.platform.plugin.action.olap.impl.OlapServiceImpl"
        scope="singleton">
      <pen:publish as-type="org.pentaho.platform.plugin.action.olap.IOlapService"/>
      <!-- Allows to override some properties form each connection before they are established. -->
      <!--property name="connectionFilters">
        <list>
          <bean class="org.pentaho.platform.plugin.action.olap.IOlapConnectionFilter"/>
        </list>
      </property-->
      <!-- Allows to specify a custom class to use as a role implementation for hosted mondrian connections. -->
      <!--property name="mondrianRole">
        <bean class="mondrian.olap.RoleImpl"/>
      </property-->
    </bean>

  <bean id="IDatabaseDialectService" class="org.pentaho.database.service.DatabaseDialectService" scope="singleton"/>

  <bean id="IDatasourceMgmtService" class="org.pentaho.platform.repository.JcrBackedDatasourceMgmtService"
        scope="singleton">
    <constructor-arg ref="unifiedRepository"/>
    <constructor-arg ref="IDatabaseDialectService"/>
  </bean>

  <!--  This mondrian user/role mapper assumes that roles from the platform also exist in mondrian -->

  <!--
  Disabled by default in 3.5.2. In trunk, this should be enabled.
    -->
  <bean id="Mondrian-UserRoleMapper"
        name="Mondrian-One-To-One-UserRoleMapper"
        class="org.pentaho.platform.plugin.action.mondrian.mapper.MondrianOneToOneUserRoleListMapper"
        scope="singleton" />


  <!--

 This sample mapper assumes that a translator is needed (in the form of a Map) to map a platform role to a mondrian role

 Note- Key = platform role, value = mondrian role

 <bean id="Mondrian-UserRoleMapper"
       name="Mondrian-SampleLookupMap-UserRoleMapper"
       class="org.pentaho.platform.plugin.action.mondrian.mapper.MondrianLookupMapUserRoleListMapper"
       scope="singleton">
   <property name="lookupMap">
     <map>
       <entry key="ceo" value="M_CEO" />
       <entry key="cto" value="M_CTO" />
       <entry key="dev" value="M_DEV" />
     </map>
   </property>
 </bean>
  -->

  <!--
  This sample mapper assumes that every user has their mondrian roles in their session under then named session variable
  <bean id="Mondrian-UserRoleMapper"
        name="Mondrian-SampleUserSession-UserRoleMapper"
        class="org.pentaho.platform.plugin.action.mondrian.mapper.MondrianUserSessionUserRoleListMapper"
        scope="singleton">
    <property name="sessionProperty" value="MondrianUserRoles" />
  </bean>
  -->
  <bean id="ReportCache" class="org.pentaho.reporting.platform.plugin.cache.NullReportCache" scope="singleton"/>
  <bean id="PentahoNameGenerator" class="org.pentaho.reporting.platform.plugin.repository.TempDirectoryNameGenerator"
        scope="prototype"/>
  <bean id="MondrianConnectionProvider"
        class="org.pentaho.reporting.platform.plugin.connection.PentahoMondrianConnectionProvider" scope="singleton"/>

  <bean id="metadataqueryexec-SQL"
        class="org.pentaho.platform.plugin.services.connections.metadata.sql.SqlMetadataQueryExec" scope="prototype"/>
  <bean id="sqlGenerator" class="org.pentaho.metadata.query.impl.sql.SqlGenerator" scope="prototype"/>
  <bean id="IThemeManager" class="org.pentaho.platform.web.html.themes.DefaultThemeManager" scope="singleton"/>

  <bean id="ICacheExpirationRegistry" class="org.pentaho.platform.plugin.services.cache.CacheExpirationRegistry"
        scope="singleton"/>
  <bean id="jdbcDriverTranslationMap" class="java.util.HashMap">
    <pen:publish as-type="ALL"/>
    <constructor-arg index="0" type="java.util.Map">
      <map key-type="java.lang.String" value-type="java.lang.String">
        <entry key="mondrian" value="none"/>
      </map>
    </constructor-arg>
  </bean>

  <bean class="org.pentaho.platform.web.servlet.DefaultSpringWadlResourceDocument">
    <constructor-arg value="classpath:META-INF/wadl/wadlResource.xml"/>
    <pen:publish as-type="INTERFACES"/>
  </bean>

  <bean id="IEmailGroupResolver" class="org.pentaho.platform.util.DefaultEmailGroupResolver"
        scope="singleton">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="10"/>
      </pen:attributes>
    </pen:publish>
  </bean>

  <bean id="currentAuthorizationUserSupplier"
        class="org.pentaho.platform.engine.security.authorization.spring.SpringSecurityContextAuthorizationUserSupplier">
  </bean>

  <bean id="authorizationRequestBuilder"
        class="org.pentaho.platform.engine.security.authorization.core.AuthorizationRequestBuilder">
    <constructor-arg ref="authorizationActionService" />
    <constructor-arg ref="currentAuthorizationUserSupplier" />
    <pen:publish as-type="CLASSES" />
  </bean>

  <bean id="authorizationActionService"
        class="org.pentaho.platform.engine.security.authorization.PentahoSystemAuthorizationActionService">
    <pen:publish as-type="INTERFACES" />
  </bean>

  <bean id="authorizationService"
        class="org.pentaho.platform.engine.security.authorization.core.AuthorizationService">
    <constructor-arg ref="authorizationActionService" />
    <constructor-arg ref="rootAuthorizationRule" />
    <pen:publish as-type="INTERFACES" />
  </bean>

  <!-- Rules are organized into three **Rule Levels**:

       1. **"absolute-grant"** (Override Level)
          An Any/Or level where ONE rule grant is sufficient to grant overall access, regardless of any denials
          from lower levels.

          This level is intended for rules that provide absolute granting authority, such as administration rules
          that should override all restrictions. Rules at this level are "undeniable" - they cannot be vetoed
          by any other rules.

          Register a rule at this level by publishing the rule bean according to the following example:
          ```xml
          <bean class="org.my.MyAbsoluteGrantRule">
            <pen:publish as-type="INTERFACES">
              <pen:attributes>
                <pen:attr key="ruleLevel" value="absolute-grant"/>
              </pen:attributes>
            </pen:publish>
          </bean>
          ```

       2. **"veto"** (Veto Level)
          An All/And level where ONE rule denial is sufficient to deny overall access (except for absolute-grant
          rules). All rules at this level must grant or abstain for the request to proceed to the next level.

          This level is intended for rules that enforce security invariants or requirements that cannot be
          violated. For example, a rule that ensures users have general access to an action before allowing
          resource-specific access. Note that veto rules cannot block absolute-grant rules.

          Register a rule at this level by publishing the rule bean according to the following example:
          ```xml
          <bean class="org.my.MyVetoRule">
            <pen:publish as-type="INTERFACES">
              <pen:attributes>
                <pen:attr key="ruleLevel" value="veto"/>
              </pen:attributes>
            </pen:publish>
          </bean>
          ```

       3. **"grant"** (Standard Grant Level)
          An Any/Or level where ONE rule grant is necessary and sufficient to grant access. This is the
          default level for authorization rules.

          This level contains the standard authorization logic for granting access to resources and actions.
          Rules at this level can be overridden by absolute-grant rules or blocked by veto rules.

          Register a rule at this level by publishing the rule bean according to the following example:
          ```xml
          <bean class="org.my.MyGrantRule">
            <pen:publish as-type="INTERFACES">
              <pen:attributes>
                <pen:attr key="ruleLevel" value="grant"/>
              </pen:attributes>
            </pen:publish>
          </bean>
          ```

          Or, more simply, without the `ruleLevel` attribute (defaults to "grant"):
          ```xml
          <bean class="org.my.MyGrantRule">
            <pen:publish as-type="INTERFACES"/>
          </bean>
          ```

       **Evaluation Order:**
       Rules are evaluated in the following order: absolute-grant → veto → grant
       1. If any absolute-grant rule grants, access is granted immediately
       2. If any veto rule denies, access is denied (unless overridden by absolute-grant)
       3. If any grant rule grants (and no veto rules deny), access is granted
       4. If no rules grant at any level, access is denied by default
    -->
  <bean id="rootAuthorizationRule"
        class="org.pentaho.platform.engine.security.authorization.PentahoAuthorizationRuleLevel">
    <constructor-arg ref="IPluginManager" />
    <constructor-arg value="ANY" />
    <constructor-arg value="absolute-grant" />
    <constructor-arg>
      <util:list>

        <bean class="org.pentaho.platform.engine.security.authorization.PentahoAuthorizationRuleLevel">
          <constructor-arg ref="IPluginManager" />
          <constructor-arg value="ALL" />
          <constructor-arg value="veto" />
          <constructor-arg>
            <util:list>

              <bean class="org.pentaho.platform.engine.security.authorization.PentahoAuthorizationRuleLevel">
                <constructor-arg ref="IPluginManager" />
                <constructor-arg value="ANY" />
                <constructor-arg value="grant" />
                <constructor-arg value="true" type="boolean" />
              </bean>
            </util:list>
          </constructor-arg>
        </bean>
      </util:list>
    </constructor-arg>
  </bean>

  <!-- Administration Universal Access -->
  <bean class="org.pentaho.platform.engine.security.authorization.core.rules.MatchedRoleAuthorizationRule">
    <constructor-arg ref="singleTenantAdminAuthorityName" />
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="ruleLevel" value="absolute-grant"/>
        <pen:attr key="priority" value="20"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.engine.security.authorization.core.rules.MatchedRoleAuthorizationRule">
    <constructor-arg ref="superAdminAuthorityName" />
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="ruleLevel" value="absolute-grant"/>
        <pen:attr key="priority" value="10"/>
      </pen:attributes>
    </pen:publish>
  </bean>

  <!-- Resource-related Rules -->
  <bean class="org.pentaho.platform.engine.security.authorization.core.rules.SupportedActionResourceTypeAuthorizationRule">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="ruleLevel" value="veto"/>
        <pen:attr key="priority" value="20"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.engine.security.authorization.core.rules.ResourceGeneralAuthorizationRule">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="ruleLevel" value="veto"/>
        <pen:attr key="priority" value="10"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.engine.security.authorization.core.rules.ResourceSpecificAuthorizationRule">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="10"/>
      </pen:attributes>
    </pen:publish>
  </bean>

  <bean id="userConsoleService" class="org.pentaho.platform.web.http.api.resources.services.UserConsoleService">
    <pen:publish as-type="CLASSES"/>
  </bean>

  <!-- region Generic File Service and Providers -->
  <bean class="org.pentaho.platform.genericfile.DefaultGenericFileService" scope="session">
    <constructor-arg>
      <pen:list class="org.pentaho.platform.api.genericfile.IGenericFileProvider"/>
    </constructor-arg>
    <constructor-arg>
      <bean class="org.pentaho.platform.genericfile.decorators.CompositeGenericFileDecorator" scope="session">
        <constructor-arg>
          <pen:list class="org.pentaho.platform.api.genericfile.IGenericFileDecorator"/>
        </constructor-arg>
      </bean>
    </constructor-arg>
    <pen:publish as-type="INTERFACES"/>
  </bean>

  <bean class="org.pentaho.platform.genericfile.providers.repository.RepositoryFileProvider" scope="session">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="20"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <!-- endregion -->
</beans>
