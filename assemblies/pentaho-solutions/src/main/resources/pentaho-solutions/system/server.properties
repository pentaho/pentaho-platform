# The main fully-qualified URL by which the server can be reached.
#
# Example: http://my-company.com:8080/pentaho/
#
# Alternative addresses can be configured in `alternative-fully-qualified-server-urls`.
# Currently, this property is used for generating content that points back to the server,
# either offline content, or online content for same-frame embedding scenarios.
# Additionally, this property is used for protection against SSRF attacks (via spoofing of the HTTP request's Host header), limiting the allowed Hosts. To enable SSRF protection, set the property `ssrf-protection-enabled` to `true`, in `system.properties`.
fully-qualified-server-url=http://localhost:8080/pentaho/

# Optional, comma-separated list of alternative fully-qualified URLs by which the server can be reached,
# beyond via the main address configured in `fully-qualified-server-url`.
#
# Example: http://192.168.10.1:8080/pentaho/, https://192.168.10.1:8443/pentaho/
#
# Alternative  addresses are typically not public and correspond to network setups where the
# server is behind a network proxy.
# Currently, this property is being used for protection against SSRF attacks (via spoofing of the HTTP request's Host header), limiting the allowed Hosts. To enable SSRF protection, set the property `ssrf-protection-enabled` to `true`, in `system.properties`.

alternative-fully-qualified-server-urls=http://127.0.0.1:8080/pentaho/

# for example 'fr' for French, 'de' for German, da for danish
locale-language=

# for example 'FR' for France, 'CA' for Canada
locale-country=

pentahoObjectFactory=org.pentaho.platform.web.http.context.WebSpringPentahoObjectFactory
# The param-value for objectFactoryCreatorCfgFile must be one of the following: 
#    - just the file name of the spring configuration file for the pentaho
#      object factory, in which case the code will look in the solution
#      repository's system folder for the file with that name.
#    - The full path to the spring configuration file (including file name).
#    - Empty or non-existent, the system will look for the file called
#      pentahoObjects.spring.xml in the solution's system folder
pentahoObjectFactoryCfgFile=pentahoObjects.spring.xml

# This defaults to UTF-8. Change the value for other encodings. Also change
# the URIEncoding in Tomcat's server.xml.
encoding=UTF-8

# This defaults to LTR (left to right), uncomment this property and
# change the value for other text directions.
#text-direction=RTL

# This sets the amount of time the system will wait for karaf to install all of
# it's features before timing out.  The default value is 2 minutes but can be
# overridden here.
#karafWaitForBoot = 120000
