<?xml version="1.0" encoding="UTF-8"?>

<!--+
  | Application context containing FilterChainProxy.
  +-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:sec="http://www.springframework.org/schema/security"
       xmlns:pen="http://www.pentaho.com/schema/pentaho-system"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
                           http://www.pentaho.com/schema/pentaho-system http://www.pentaho.com/schema/pentaho-system.xsd"
       default-lazy-init="true">

  <!-- ======================== FILTER CHAIN ======================= -->
  <!--
      if you wish to use channel security, add "channelProcessingFilter," in
      front of "httpSessionContextIntegrationFilter" in the list below
  -->
  <bean id="filterChainProxy" class="org.springframework.security.web.FilterChainProxy">
    <constructor-arg>
      <util:list>
        <sec:filter-chain pattern="/api/csrf/token"
                          filters="ssrfGateFilter,
                                   csrfGateFilter,
                                   corsFilter" />

        <sec:filter-chain pattern="/webservices/**"
                          filters="ssrfGateFilter,
                                   csrfGateFilter,
                                   corsFilter,
                                   securityContextHolderAwareRequestFilterForWS,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   basicProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   mdcFilter,
                                   exceptionTranslationFilter,
                                   filterInvocationInterceptorForWS" />

        <sec:filter-chain pattern="/api/repos/**"
                          filters="ssrfGateFilter,
                                   csrfGateFilter,
                                   corsFilter,
                                   securityContextHolderAwareRequestFilterForWS,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   basicProcessingFilter,
                                   requestParameterProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   mdcFilter,
                                   exceptionTranslationFilter,
                                   filterInvocationInterceptorForWS,
                                   preFlightFilter" />

        <sec:filter-chain pattern="/api/**"
                          filters="ssrfGateFilter,
                                   csrfGateFilter,
                                   corsFilter,
                                   securityContextHolderAwareRequestFilterForWS,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   basicProcessingFilter,
                                   requestParameterProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   mdcFilter,
                                   exceptionTranslationFilter,
                                   filterInvocationInterceptorForWS" />

        <sec:filter-chain pattern="/plugin/reporting/api/jobs/**"
                          filters="ssrfGateFilter,
                                   csrfGateFilter,
                                   corsFilter,
                                   securityContextHolderAwareRequestFilterForWS,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   basicProcessingFilter,
                                   requestParameterProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   mdcFilter,
                                   exceptionTranslationFilter,
                                   filterInvocationInterceptorForWS,
                                   preFlightFilter" />

        <sec:filter-chain pattern="/plugin/**"
                          filters="ssrfGateFilter,
                                   csrfGateFilter,
                                   corsFilter,
                                   securityContextHolderAwareRequestFilterForWS,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   basicProcessingFilter,
                                   requestParameterProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   mdcFilter,
                                   exceptionTranslationFilter,
                                   filterInvocationInterceptorForWS" />

        <sec:filter-chain pattern="/**"
                          filters="ssrfGateFilter,
                                   csrfGateFilter,
                                   corsFilter,
                                   securityContextHolderAwareRequestFilter,
                                   httpSessionPentahoSessionContextIntegrationFilter,
                                   httpSessionContextIntegrationFilter,
                                   httpSessionReuseDetectionFilter,
                                   logoutFilter,
                                   authenticationProcessingFilter,
                                   basicProcessingFilter,
                                   requestParameterProcessingFilter,
                                   anonymousProcessingFilter,
                                   sessionMgmtFilter,
                                   mdcFilter,
                                   exceptionTranslationFilter,
                                   filterInvocationInterceptor" />
      </util:list>
    </constructor-arg>
  </bean>

  <!-- ======================== AUTHENTICATION ======================= -->

  <bean id="defaultAuthenticationEventPublisher" class="org.springframework.security.authentication.DefaultAuthenticationEventPublisher"/>

  <bean id="authenticationManager" class="org.springframework.security.authentication.ProviderManager">
    <constructor-arg>
      <util:list>
        <pen:bean class="org.springframework.security.authentication.AuthenticationProvider"/>
        <ref bean="anonymousAuthenticationProvider" />
      </util:list>
    </constructor-arg>
    <property name="authenticationEventPublisher">
      <ref bean="defaultAuthenticationEventPublisher" />
    </property>
  </bean>

  <!-- Automatically receives AuthenticationEvent messages -->
  <bean id="loggerListener" class="org.pentaho.platform.engine.security.event.PentahoLoggerListener" />
  <bean id="basicProcessingFilter" class="org.pentaho.platform.web.http.security.PentahoBasicProcessingFilter">
    <constructor-arg ref="authenticationManager" />
    <constructor-arg ref="basicProcessingFilterEntryPoint" />
  </bean>
  <bean id="basicAuthPostFilter"
        class="org.pentaho.platform.web.http.security.PentahoBasicPostProcessingFilter">
  </bean>


  <bean id="basicProcessingFilterEntryPoint"
        class="org.pentaho.platform.web.http.security.PentahoBasicAuthenticationEntryPoint">
    <property name="realmName" value="Pentaho Realm" />
  </bean>

  <bean id="unauthorizedEntryPoint" class="org.pentaho.platform.web.http.security.Http401UnauthorizedEntryPoint" />

  <!-- custom Pentaho begin -->

  <!-- replaces Spring's default ApplicationEventMulticaster; do not change bean id -->
  <bean id="applicationEventMulticaster" class="org.pentaho.platform.engine.security.event.OrderedApplicationEventMulticaster">
    <property name="taskExecutor">
      <bean class="org.springframework.core.task.SyncTaskExecutor" />
    </property>
  </bean>

  <!-- next two beans replace SecurityStartupFilter -->
  <bean class="org.pentaho.platform.engine.security.event.PentahoAuthenticationSuccessListener" />
  <bean class="org.pentaho.platform.engine.security.event.PentahoSessionStartupAuthenticationSuccessListener" />

  <bean id="httpSessionReuseDetectionFilter"
        class="org.pentaho.platform.web.http.security.HttpSessionReuseDetectionFilter">
    <property name="filterProcessesUrl" value="/j_spring_security_check" />
    <property name="sessionReuseDetectedUrl" value="/Login?login_error=2" />
  </bean>


  <bean id="requestParameterProcessingFilter"
        class="org.pentaho.platform.web.http.security.RequestParameterAuthenticationFilter">
    <property name="authenticationManager">
      <ref bean="authenticationManager" />
    </property>
    <property name="authenticationEntryPoint">
      <ref bean="requestParameterProcessingFilterEntryPoint" />
    </property>
  </bean>
  <bean id="requestParameterProcessingFilterEntryPoint"
        class="org.pentaho.platform.web.http.security.RequestParameterFilterEntryPoint" />

  <bean id="httpSessionPentahoSessionContextIntegrationFilter"
        class="org.pentaho.platform.web.http.filters.HttpSessionPentahoSessionIntegrationFilter" />

  <!-- custom Pentaho end -->
  <bean id="anonymousProcessingFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
    <constructor-arg value="foobar" />
    <constructor-arg value="anonymousUser" />
    <constructor-arg>
      <list>
        <bean class="org.springframework.security.core.authority.SimpleGrantedAuthority">
          <constructor-arg value="Anonymous" />
        </bean>
      </list>
    </constructor-arg>
  </bean>
  <bean id="anonymousAuthenticationProvider"
        class="org.springframework.security.authentication.AnonymousAuthenticationProvider">
    <constructor-arg value="foobar" />
  </bean>
  <bean id="httpSessionContextIntegrationFilter"
        class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />
  <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
    <constructor-arg value="/index.jsp" />
    <!-- URL redirected to after logout -->
    <constructor-arg>
      <util:list>
        <bean class="org.pentaho.platform.web.http.security.PentahoLogoutHandler" />
        <bean class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler" />
      </util:list>
    </constructor-arg>
    <property name="filterProcessesUrl" value="/Logout" />
  </bean>
  <bean id="securityContextHolderAwareRequestFilter"
        class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter" />

  <bean id="securityContextHolderAwareRequestFilterForWS" class="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter">
    <!-- SecurityContextHolderAwareRequestFilter in latest spring security has 2 behaviours, for pre and post servlet 3: in pre-servlet 3,
      the wrapper class used by default is SecurityContextHolderAwareRequestWrapper; this means we no longer need to set it as a 'wrapperClass'
      property ( this property no longer exists, anyway ) -->
    <!-- hhttps://github.com/spring-projects/spring-security/blob/4.1.3.RELEASE/web/src/main/java/org/springframework/security/web/servletapi/SecurityContextHolderAwareRequestFilter.java#L45-L47 -->
    <!-- <property name="wrapperClass" value="org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper" /> -->
  </bean>

  <!-- Excel pre-flight filter -->
  <bean id="preFlightFilter" class="org.pentaho.platform.web.http.filters.PreFlightReportingFilter" />


  <!--
      ===================== HTTP REQUEST SECURITY ====================
  -->
  <bean id="webBrowserRequestMatcher" class="org.springframework.security.web.util.matcher.OrRequestMatcher">
    <constructor-arg>
      <util:list>
        <ref bean="webBrowserRequestMatcherSecFetch" />

        <!--
          This matcher is for requests considered insecure by the web browser, where the server is accessed via public
          IP with HTTP, or private IP (even with HTTPS), or HTTPS with an invalid SSL certificate, causing `sec-fetch-*`
          headers not to be sent. If the server is always accessed via a domain, either via HTTP, or via HTTPS with a
          valid SSL certificate, then it should be possible to remove this, for added security.
        -->
        <ref bean="webBrowserRequestMatcherFallback" />
      </util:list>
    </constructor-arg>
  </bean>

  <bean id="webBrowserRequestMatcherSecFetch"
        class="org.pentaho.platform.web.servlet.matchers.WebBrowserSecFetchRequestMatcher" />
  <bean id="webBrowserRequestMatcherFallback"
        class="org.pentaho.platform.web.servlet.matchers.WebBrowserUserAgentRequestMatcher">
    <!-- If needed, browser and non-browser `user-agent` header patterns may be changed from defaults:
    <constructor-arg>
      <util:list>
        <value>\bchrome/\b</value>
        <value>\bheadlesschrome/\b</value>
        <value>\bfirefox/\b</value>
        <value>\bsafari/\b</value>
        <value>\bedge/\b</value>
        <value>\btrident/\b</value>
        <value>\bmsie/\b</value>
        <value>\bopera/\b</value>
        <value>\bopr/\b</value>
      </util:list>
    </constructor-arg>
    <constructor-arg>
      <util:list>
        <value>\bcurl/\b</value>
        <value>\bwget/\b</value>
        <value>\bpostmanruntime/\b</value>
        <value>\bpython-requests/\b</value>
        <value>\bbot\b</value>
        <value>\bcrawler\b</value>
        <value>\bspider\b</value>
        <value>\bjava/\b</value>
        <value>\bphp/\b</value>
        <value>\bruby/\b</value>
      </util:list>
    </constructor-arg>
    -->
  </bean>

  <bean id="userNavigationRequestMatcher" class="org.springframework.security.web.util.matcher.OrRequestMatcher">
    <constructor-arg>
      <util:list>
        <ref bean="userNavigationRequestMatcherSecFetch" />

        <!--
          This matcher is for requests considered insecure by the web browser, where the server is accessed via public
          IP with HTTP, or private IP (even with HTTPS), or HTTPS with an invalid SSL certificate, causing `sec-fetch-*`
          headers not to be sent. If the server is always accessed via a domain, either via HTTP, or via HTTPS with a
          valid SSL certificate, then it should be possible to remove this, for added security.
        -->
        <ref bean="userNavigationRequestMatcherFallback" />
      </util:list>
    </constructor-arg>
  </bean>

  <bean id="userNavigationRequestMatcherSecFetch"
        class="org.pentaho.platform.web.servlet.matchers.UserNavigationSecFetchRequestMatcher" />
  <bean id="userNavigationRequestMatcherFallback" class="org.springframework.security.web.util.matcher.AndRequestMatcher">
    <constructor-arg>
      <util:list>
        <!-- Only use `accept` header matcher if `sec-fetch-*` headers are not present. -->
        <bean class="org.springframework.security.web.util.matcher.NegatedRequestMatcher">
          <constructor-arg ref="webBrowserRequestMatcherSecFetch" />
        </bean>
        <ref bean="webBrowserRequestMatcherFallback" />
        <bean class="org.pentaho.platform.web.servlet.matchers.UserNavigationAcceptRequestMatcher">
          <!-- If needed, matching `accept` header patterns may be changed from defaults:
          <constructor-arg>
            <util:list>
              <value>\btext/html\b</value>
              <value>\bapplication/xhtml\+xml\b</value>
            </util:list>
          </constructor-arg>
          -->
        </bean>
      </util:list>
    </constructor-arg>
  </bean>

  <bean id="httpSessionRequestCache" class="org.springframework.security.web.savedrequest.HttpSessionRequestCache">
    <!-- After login, only send the user back to "user navigation" requests. Otherwise, go back /Home -->
    <property name="requestMatcher" ref="userNavigationRequestMatcher" />
  </bean>

  <bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
    <constructor-arg ref="userNavigationAwareAuthenticationEntryPoint"/>
    <constructor-arg ref="httpSessionRequestCache"/>
    <property name="accessDeniedHandler">
      <bean class="org.springframework.security.web.access.AccessDeniedHandlerImpl" />
    </property>
  </bean>

  <bean id="sas" class="org.springframework.security.web.authentication.session.ChangeSessionIdAuthenticationStrategy" />

  <bean id="loginAttemptService" class="org.pentaho.platform.engine.security.LoginAttemptService" scope="singleton">
    <constructor-arg name="maxAttempt" value="10"></constructor-arg>
    <constructor-arg name="cacheMinutes" value="1440"></constructor-arg>
  </bean>

  <bean id="preventBruteForceAuthenticationFailureListener"
        class="org.pentaho.platform.web.http.security.PreventBruteForceAuthenticationFailureListener" >
    <constructor-arg ref="loginAttemptService"/>
  </bean>

  <bean id="authenticationSuccessHandler"
        class="org.pentaho.platform.web.http.security.PreventBruteForceSavedRequestAwareAuthenticationSuccessHandler">
    <constructor-arg ref="loginAttemptService"/>
    <property name="defaultTargetUrl" value="/Home" />
    <property name="requestCache" ref="httpSessionRequestCache"/>
  </bean>
  <bean id="authenticationFailureHandler"
        class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
    <constructor-arg type="java.lang.String" value="/Login?login_error=1" />
  </bean>

  <bean id="authenticationProcessingFilter"
        class="org.pentaho.platform.web.http.security.PreventBruteForceUsernamePasswordAuthenticationFilter">
    <constructor-arg ref="loginAttemptService"/>
    <property name="authenticationManager" ref="authenticationManager" />
    <property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" />
    <property name="authenticationFailureHandler" ref="authenticationFailureHandler" />
    <property name="filterProcessesUrl" value="/j_spring_security_check" />
    <property name="usernameParameter" value="j_username" />
    <property name="passwordParameter" value="j_password" />
	<property name="sessionAuthenticationStrategy" ref="sas" />
  </bean>

  <bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
    <constructor-arg value="/Login" />
    <property name="forceHttps" value="false" />
  </bean>

  <bean id="userNavigationAwareAuthenticationEntryPoint"
        class="org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint">
    <constructor-arg>
      <util:map>
        <!-- 1. Browser - User Navigation: redirect to the /Login page -->
        <entry key-ref="userNavigationRequestMatcher" value-ref="authenticationProcessingFilterEntryPoint" />

        <!-- 2. Browser - Other: reject with 401, but with no challenge in WWW-Authenticate header -->
        <entry key-ref="webBrowserRequestMatcher" value-ref="unauthorizedEntryPoint" />
      </util:map>
    </constructor-arg>

    <!-- 3. Non-Browser: reject with 401 and a basic auth challenge in WWW-Authenticate header -->
    <property name="defaultEntryPoint" ref="basicProcessingFilterEntryPoint" />
  </bean>

  <bean id="httpRequestAccessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
    <constructor-arg>
      <util:list>
        <ref bean="roleVoter" />
      </util:list>
    </constructor-arg>
    <property name="allowIfAllAbstainDecisions" value="false" />
  </bean>

  <bean id="requireJsConfigRequestMatcher" class="org.pentaho.platform.web.servlet.matchers.RequireJsConfigRequestMatcher" />

  <bean id="filterInvocationInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
    <property name="authenticationManager" ref="authenticationManager" />
    <property name="accessDecisionManager" ref="httpRequestAccessDecisionManager" />

    <!-- allow anyone to see the wsdl of various services -->
    <!--
        Note - the "Nobody" below is saying that resource URLs with those
        patterns not be available through a web call.
    -->
    <property name="securityMetadataSource">
      <!-- http://stackoverflow.com/questions/30099851/spring-security-samples-preauth-xml-example-fails-to-run#answer-30105317 -->
      <sec:filter-security-metadata-source request-matcher="ciRegex" use-expressions="false">
        <sec:intercept-url pattern="\A/osgi/cxf/hadoop-cluster/runTests.*\Z" access="Authenticated" />
        <sec:intercept-url pattern="\A/osgi/cxf/hadoop-cluster/.*\Z" access="Administrator" />
        <sec:intercept-url pattern="\A/content/common-ui/resources/web/(.+/)*.+\.js.*\Z" access="Anonymous,Authenticated" />
        <!-- This Require JS config is not served from the /content or /api/repos content generators,
             and is thus not handled by requireJsConfigRequestMatcher and needs to be so explicitly -->
        <sec:intercept-url pattern="\A/js/require-js-cfg.js(\?.*)?\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url request-matcher-ref="requireJsConfigRequestMatcher" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/data-access/resources/gwt/.*css\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/webcontext.js.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/common-ui/resources/web/cache/cache-service.js.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/cacheexpirationservice.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/js/theme.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/common-ui/resources/themes/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/common-ui/resources/web/dojo/djconfig.js.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/content/pentaho-mobile/resources/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/docs/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/mantlelogin/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/mantle/mantleloginservice/*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/mantle/.*\Z" access="Authenticated" />
        <sec:intercept-url pattern="\A/welcome/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/public/.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/login.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/ping/alive.gif.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/j_spring_security_check.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/getimage.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/getresource.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/admin.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/versioncontrol.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/propertieseditor.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/propertiespanel.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/subscriptionadmin.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/resetrepository.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/viewaction.*solution.admin.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/scheduleradmin.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/publish.*\Z" access="Admin" />
        <sec:intercept-url pattern="\A/logout.*\Z" access="Anonymous" />
        <sec:intercept-url pattern="\A/solutionrepositoryservice.*component=delete.*solution=system.*\Z" access="Nobody" />
        <sec:intercept-url pattern="\A/solutionrepositoryservice.*solution=system.*component=delete.*\Z" access="Nobody" />
        <sec:intercept-url pattern=".*system.*pentaho.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*applicationcontext.*.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*pentahoobjects.spring.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*pentahosystemconfig.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*adminplugins.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*plugin.properties.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*sessionstartupactions.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*systemlisteners.xml.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*hibernate.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*birt/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*dialects/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*google/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*jasperreports/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*kettle/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*logs/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*mondrian/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*quartz/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*simple-jndi/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*smtp-email/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*ui/.*" access="Nobody" />
        <sec:intercept-url pattern=".*system.*\.\./.*" access="Nobody" />
        <sec:intercept-url pattern="\A/plugin/reporting/api/jobs/.*\Z" access="Anonymous,Authenticated" method="OPTIONS" />
        <sec:intercept-url pattern="\A/plugin/reporting/api/jobs/.*\Z" access="Anonymous,Authenticated" method="HEAD" />
        <sec:intercept-url pattern="\A/api/repos/.*\Z" access="Anonymous,Authenticated" method="OPTIONS" />
        <sec:intercept-url pattern="\A/api/repos/.*\Z" access="Anonymous,Authenticated" method="HEAD" />
        <sec:intercept-url pattern="\A/.*\Z" access="Authenticated" />
      </sec:filter-security-metadata-source>
    </property>
  </bean>


  <bean id="filterInvocationInterceptorForWS" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
    <property name="authenticationManager" ref="authenticationManager" />
    <property name="accessDecisionManager" ref="httpRequestAccessDecisionManager" />

    <!-- allow anyone to see the wsdl of various services -->
    <property name="securityMetadataSource">
      <!-- http://stackoverflow.com/questions/30099851/spring-security-samples-preauth-xml-example-fails-to-run#answer-30105317 -->
      <sec:filter-security-metadata-source request-matcher="ciRegex" use-expressions="false">
        <sec:intercept-url pattern="\A/webservices/unifiedrepository\?wsdl.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/webservices/userrolelistservice\?wsdl.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/webservices/userroleservice\?wsdl.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/webservices/authorizationpolicy\?wsdl.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/webservices/rolebindingdao\?wsdl.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/webservices/plugins/scheduler-plugin/scheduler\?wsdl.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/webservices/repositorysync\?wsdl.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/webservices/datasourcemgmtservice\?wsdl.*\Z" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/webservices/.*\Z" access="Authenticated" />
        <sec:intercept-url pattern="\A/plugin/reporting/api/jobs/.*\Z" access="Anonymous,Authenticated" method="OPTIONS" />
        <sec:intercept-url pattern="\A/plugin/reporting/api/jobs/.*\Z" access="Anonymous,Authenticated" method="HEAD" />
        <sec:intercept-url pattern="\A/api/repos/.*\Z" access="Anonymous,Authenticated" method="OPTIONS" />
        <sec:intercept-url pattern="\A/api/repos/.*\Z" access="Anonymous,Authenticated" method="HEAD" />
        <sec:intercept-url request-matcher-ref="requireJsConfigRequestMatcher" access="Anonymous,Authenticated" />
        <sec:intercept-url pattern="\A/api/.*\Z" access="Authenticated" />
        <sec:intercept-url pattern="\A/plugin/.*\Z" access="Authenticated" />
      </sec:filter-security-metadata-source>
    </property>
  </bean>


  <bean id="defaultRole" class="java.lang.String">
    <constructor-arg value="Authenticated" />
  </bean>

  <bean id="anonymousRole" class="java.lang.String">
    <constructor-arg value="Anonymous" />
  </bean>

  <!-- used by ExtraRolesUserRoleListServiceDecorator beans -->
  <bean id="extraRoles" class="org.springframework.beans.factory.config.ListFactoryBean">
    <property name="sourceList">
      <util:list>
        <ref bean="defaultRole" />
        <ref bean="anonymousRole" />
      </util:list>
    </property>
  </bean>

  <bean id="preAuthenticatedSecurityFilter" class="org.pentaho.platform.web.http.security.PreAuthenticatedFilter">
    <constructor-arg ref="PreAuthenticatedSessionHolder"/>
  </bean>

  <bean id="httpSessionSecurityContextRepository" class="org.springframework.security.web.context.HttpSessionSecurityContextRepository"/>
  <bean id="sessionMgmtFilter" class="org.springframework.security.web.session.SessionManagementFilter">
    <constructor-arg ref="httpSessionSecurityContextRepository"/>
    <constructor-arg ref="sas"/>
  </bean>

  <bean id="mdcFilter" class="org.pentaho.platform.web.http.filters.PentahoMDCFilter" />

</beans>
