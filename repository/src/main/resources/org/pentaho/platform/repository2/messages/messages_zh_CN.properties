#
# *******************************************************************************
# Hitachi Vantara
#
# Copyright (C) 2018 by Hitachi Vantara : http://www.pentaho.com
# *******************************************************************************
#

AbstractRepositoryLifecycleManager.ERROR_0001_STARTUP_NOT_CALLED=startup must be called first
MondrianRepositoryLifecycleManager.USER_0001_VER_COMMENT_MONDRIAN=[\u7cfb\u7edf]\u521b\u5efa\u4e86 mondrian \u6587\u4ef6\u5939
PdiRepositoryLifecycleManager.USER_0001_VER_COMMENT_PDI=[\u7cfb\u7edf]\u521b\u5efa\u4e86 pdi \u6587\u4ef6\u5939
PdiRepositoryLifecycleManager.USER_0002_VER_COMMENT_DATABASES=[\u7cfb\u7edf]\u521b\u5efa\u4e86\u6570\u636e\u5e93\u6587\u4ef6\u5939
PdiRepositoryLifecycleManager.USER_0003_VER_COMMENT_SLAVESERVERS=[\u7cfb\u7edf]\u521b\u5efa\u4e86 slaveServers \u6587\u4ef6\u5939
PdiRepositoryLifecycleManager.USER_0004_CLUSTERSCHEMAS=[\u7cfb\u7edf]\u521b\u5efa\u4e86 clusterSchemas \u6587\u4ef6\u5939
PdiRepositoryLifecycleManager.USER_0005_PARTITIONSCHEMAS=[\u7cfb\u7edf]\u521b\u5efa\u4e86 partitionSchemas \u6587\u4ef6\u5939
PentahoJcrTemplate.ERROR_0001_ACCESS_DENIED=Access denied to this data
DefaultRepositoryLifecycleManager.USER_0001_VER_COMMENT_PENTAHO_ROOT=[\u7cfb\u7edf]\u521b\u5efa\u4e86 pentaho \u6839\u6587\u4ef6\u5939
DefaultRepositoryLifecycleManager.USER_0002_VER_COMMENT_TENANT_ROOT=[\u7cfb\u7edf]\u521b\u5efa\u4e86\u79df\u6237\u6839\u6587\u4ef6\u5939
DefaultRepositoryLifecycleManager.USER_0003_TENANT_PUBLIC=[\u7cfb\u7edf]\u521b\u5efa\u4e86\u79df\u6237\u516c\u7528\u6587\u4ef6\u5939
DefaultRepositoryLifecycleManager.USER_0004_TENANT_HOME=[\u7cfb\u7edf]\u521b\u5efa\u4e86\u79df\u6237\u4e3b\u6587\u4ef6\u5939
DefaultRepositoryLifecycleManager.USER_0005_TENANT_ETC=[\u7cfb\u7edf]\u521b\u5efa\u4e86\u79df\u6237\u7b49\u6587\u4ef6\u5939
DefaultRepositoryLifecycleManager.USER_0006_USER_HOME=[\u7cfb\u7edf]\u521b\u5efa\u4e86\u7528\u6237\u4e3b\u6587\u4ef6\u5939
DefaultUnifiedRepositoryWebService.ERROR_0001_NO_IMPL=no IUnifiedRepository implementation
ExceptionLoggingDecorator.lockException=lock error while {0}\n\nReference number: {1}
ExceptionLoggingDecorator.transactionException=transaction error while {0}\n\nReference number: {1}
ExceptionLoggingDecorator.accessDeniedException=access denied while {0}\n\nReference number: {1}
ExceptionLoggingDecorator.referentialIntegrityException=referential integrity error while {0}; (file {1} is being referenced by file(s) {2})\n\nReference number: {3}
ExceptionLoggingDecorator.fileExistsException=file already exists error while {0}; path is "{1}"\n\nReference number: {2}
ExceptionLoggingDecorator.malformedNameException=malformed name error while {0}; invalid name: "{1}"\n\nReference number: {2}
ExceptionLoggingDecorator.canUnlockFile=determining ability to unlock file with id "{0}"
ExceptionLoggingDecorator.createFile=creating file with name "{0}"
ExceptionLoggingDecorator.createFolder=creating folder with name "{0}"
ExceptionLoggingDecorator.deleteFile=deleting file with id "{0}"
ExceptionLoggingDecorator.deleteFileAtVersion=deleting file with id "{0}" and version id "{1}"
ExceptionLoggingDecorator.generalException=exception while {0}\n\nReference number: {1}
ExceptionLoggingDecorator.getAcl=getting ACL for file with id "{0}"
ExceptionLoggingDecorator.getChildren=getting children for folder with id "{0}"
ExceptionLoggingDecorator.getData=getting data for file with id "{0}"
ExceptionLoggingDecorator.getDataInBatch=getting data for files
ExceptionLoggingDecorator.getDataAtVersion=getting data for file with id "{0}" and version id "{0}"
ExceptionLoggingDecorator.getDeletedFiles=getting all deleted files
ExceptionLoggingDecorator.getDeletedFilesInFolder=getting deleted files in folder with path "{0}"
ExceptionLoggingDecorator.getEffectiveAces=getting effective ACEs for file with id "{0}"
ExceptionLoggingDecorator.getFile=getting file with path "{0}"
ExceptionLoggingDecorator.getReferrers=getting referrers for file with id "{0}"
ExceptionLoggingDecorator.getTree=getting tree rooted at path "{0}"
ExceptionLoggingDecorator.getFileAtVersion=getting file with id "{0}" and version id "{1}"
ExceptionLoggingDecorator.getFileById=getting file with id "{0}"
ExceptionLoggingDecorator.getVersionSummaries=getting version history for file with id "{0}"
ExceptionLoggingDecorator.getVersionSummary=getting version information for file with id "{0}" and version id "{1}"
ExceptionLoggingDecorator.getVersionSummaryInBatch=getting version information for files
ExceptionLoggingDecorator.hasAccess=determining access for file with path "{0}"
ExceptionLoggingDecorator.lockFile=locking file with id "{0}"
ExceptionLoggingDecorator.moveFile=moving file with id "{0}" to destination path "{1}"
ExceptionLoggingDecorator.copyFile=copying file with id "{0}" to destination path "{1}"
ExceptionLoggingDecorator.referenceNumber=Reference number: {0}
ExceptionLoggingDecorator.restoreFileAtVersion=restoring file with file id "{0}" and version id "{1}"
ExceptionLoggingDecorator.undeleteFile=undeleting file with id "{0}"
ExceptionLoggingDecorator.unlockFile=unlocking file with id "{0}"
ExceptionLoggingDecorator.updateAcl=updating ACL for file with id "{0}"
ExceptionLoggingDecorator.updateFile=updating file with id "{0}"
ExceptionLoggingDecorator.getReservedChars=getting reserved characters
ExceptionLoggingDecorator.getAvailableLocalesForFile=getting available locales for file "{0}"
ExceptionLoggingDecorator.getLocalePropertiesForFile=getting locale properties for file "{0}"
ExceptionLoggingDecorator.setLocalePropertiesForFile=setting locale properties for file "{0}"
ExceptionLoggingDecorator.deleteLocalePropertiesForFile=deleting locale properties for file "{0}"
FileImporter.WARN_0001_NO_EXT=skipping {0} because file has no extension
FileImporter.WARN_0002_NO_CONVERTER=skipping {0} because no converter found for extension
FileImporter.WARN_0003_IOEXCEPTION=skipping {0} due to exception
FileImporter.WARN_0004_NO_MIME=skipping {0} because no MIME type found for extension
FileImporter.USER_0001_IMPORT_COUNT=imported {0} of {1} files ({2} ms)
FileImporter.ERROR_0001_ERROR_RETRIEVING_FILES=Error retrieving files
FileImporter.ERROR_0002_ERROR_IMPORTING_FILE=Error importing file {1}: {0}
JackrabbitRepositoryFileAclDao.ERROR_0001_NODE_NOT_FOUND=node with id [{0}] not found
JackrabbitRepositoryFileAclDao.ERROR_0002_POLICY=most likely due to calling readAclById before calling createAcl
JackrabbitRepositoryFileAclDao.USER_0001_VER_COMMENT_CREATED_ACL=[\u7cfb\u7edf]\u521b\u5efa\u4e86 ACL
JackrabbitRepositoryFileAclDao.USER_0002_VER_COMMENT_UPDATED_ACL=[\u7cfb\u7edf]\u66f4\u65b0\u4e86 ACL
JcrRepositoryFileDao.ERROR_0001_NO_TRANSFORMER=no transformer found
JcrRepositoryFileDao.ERROR_0002_CANNOT_OVERWRITE_FILE_WITH_FOLDER=cannot overwrite file with folder
JcrRepositoryFileDao.ERROR_0003_ILLEGAL_DEST_PATH=illegal destination path
JcrRepositoryFileDao.ERROR_0004_PARENT_MUST_EXIST=immediate parent folder of destination path must exist
JcrRepositoryFileDao.ERROR_0005_PARENT_MUST_BE_FOLDER=immediate parent of destination path is not a folder
JcrRepositoryFileDao.USER_0001_VER_COMMENT_ADD_FOLDER=[\u7cfb\u7edf]\u6dfb\u52a0\u4e86\u5b50\u6587\u4ef6\u5939\u201c{0}\u201d\u5230 {1}
JcrRepositoryFileDao.USER_0002_VER_COMMENT_ADD_FILE=[\u7cfb\u7edf]\u6dfb\u52a0\u4e86\u5b50\u6587\u4ef6\u201c{0}\u201d\u5230 {1}
JcrRepositoryFileDao.USER_0003_VER_COMMENT_LOCK_FILE=[\u7cfb\u7edf]\u9501\u5b9a\u4e86 ID={0} \u7684\u6587\u4ef6
JcrRepositoryFileDao.LOCALE_0001_UPDATE_PROPERTIES=update locale properies for id={0}
JcrRepositoryFileDao.LOCALE_0002_DELETE_PROPERTIES=delete locale properies for id={0}
JcrRepositoryFileUtils.ERROR_0001_MISSING_EXT=file names must have an extension
JcrRepositoryFileUtils.USER_0001_VER_COMMENT_UNLOCK_FILE=[\u7cfb\u7edf]\u89e3\u9501\u4e86 ID={0} \u7684\u6587\u4ef6
JcrRepositoryFileUtils.WARN_0001_NPE_FROM_CR=\u201c\u4ece\u5185\u5bb9\u5b58\u50a8\u5e93\u83b7\u53d6 NPE\u201d
XmlAdapter.ERROR_0001_MARSHAL=error marshalling {0} to {1}
XmlAdapter.ERROR_0002_UNMARSHAL=error unmarshalling {0} to {1}
DefaultDeleteHelper.ERROR_0001_PATH_NOT_FOUND=cannot determine original parent folder ID since original parent folder path does not exist
DefaultDeleteHelper.ERROR_0002_NOT_CLEAN=this should have been cleaned up on undelete or permanent delete
JcrRepositoryFileDao.ERROR_0006_ACCESS_DENIED_DELETE=Access denied while deleting file with id [ {0} ]
DefaultUnifiedRepository.ERROR_0001_ACCESS_DENIED_UPDATE_ACL=Access denied while updating permissions on file with id [ {0} ]
AclNodeHelper.ERROR_0001_ROOT_FOLDER_NOT_AVAILABLE=Root folder {0} not available. Using default {1} instead
AclNodeHelper.WARN_0001_REMOVE_ACL_NODE=Removing the ACL node:
AclNodeHelper.WARN_0002_REMOVE_ACL_STORE=Removing the ACL store: {0}
