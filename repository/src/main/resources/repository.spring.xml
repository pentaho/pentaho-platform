<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:pen="http://www.pentaho.com/schema/pentaho-system"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd 
                           http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
                           http://www.pentaho.com/schema/pentaho-system http://www.pentaho.com/schema/pentaho-system.xsd"
       default-lazy-init="true">

  <!-- <bean class="org.pentaho.platform.engine.core.system.objfac.spring.ApplicationContextPentahoSystemRegisterer"
      lazy-init="false"/> -->


  <bean id="propertyPlaceholderConfigurerRepository"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" lazy-init="false">
    <property name="location" value="repository.spring.properties"/>
    <property name="placeholderPrefix" value="%{"/>
  </bean>

  <!--
    default-lazy-init makes all of the beans in this file lazy-init=true which means they are not instantiated until
    they are referenced; this allows PentahoSystem to be fully initialized (which is used internally in
    SpringSecurityLoginModule and SpringSecurityPrincipalProvider (pentaho-third-party-security project)
  -->

  <bean id="IPasswordService" class="org.pentaho.platform.util.KettlePasswordService" scope="singleton"/>
  <!-- An access decision manager used by the business objects. -->
  <bean id="businessAccessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
    <constructor-arg>
      <list>
        <ref bean="authorizationPolicyVoter"/>
      </list>
    </constructor-arg>
    <property name="allowIfAllAbstainDecisions" value="false"/>
  </bean>

  <bean id="jcrTransactionManager" class="org.springframework.extensions.jcr.jackrabbit.LocalTransactionManager">
    <property name="sessionFactory" ref="jcrSessionFactory"/>
  </bean>

  <bean id="jcrAdminTransactionManager" class="org.springframework.extensions.jcr.jackrabbit.LocalTransactionManager">
    <property name="sessionFactory" ref="jcrAdminSessionFactory"/>
  </bean>

  <bean id="unifiedRepositoryTransactionInterceptor"
        class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <property name="transactionManager" ref="jcrTransactionManager"/>
    <property name="transactionAttributeSource">
      <value>
        org.pentaho.platform.api.mt.ITenantManager.getChildTenants=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.mt.ITenantManager.updateTentant=PROPAGATION_REQUIRED
        org.pentaho.platform.api.mt.ITenantManager.deleteTenant=PROPAGATION_REQUIRED
        org.pentaho.platform.api.mt.ITenantManager.deleteTenants=PROPAGATION_REQUIRED
        org.pentaho.platform.api.mt.ITenantManager.enableTenant=PROPAGATION_REQUIRED
        org.pentaho.platform.api.mt.ITenantManager.enableTenants=PROPAGATION_REQUIRED
        org.pentaho.platform.api.mt.ITenantManager.isSubTenant=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.mt.ITenantManager.getTenantRootFolder=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.mt.ITenantManager.getTenant=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.mt.ITenantManager.createUserHomeFolder=PROPAGATION_REQUIRED
        org.pentaho.platform.api.mt.ITenantManager.getUserHomeFolder=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFile=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileAtVersion=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileById=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForRead=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForReadInBatch=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataAtVersionForRead=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForExecute=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForExecuteInBatch=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataAtVersionForExecute=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.createFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.createFolder=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getChildren=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateFolder=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAcl=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.hasAccess=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getEffectiveAces=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateAcl=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.lockFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.unlockFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.canUnlockFile=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.restoreFileAtVersion=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummary=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummaryInBatch=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummaries=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteFileAtVersion=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.undeleteFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDeletedFiles=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDeletedFiles=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.moveFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.copyFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getTree=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getReferrers=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setFileMetadata=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileMetadata=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAvailableLocalesForFileById=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAvailableLocalesForFileByPath=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAvailableLocalesForFile=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getLocalePropertiesForFileById=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getLocalePropertiesForFileByPath=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getLocalePropertiesForFile=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setLocalePropertiesForFileById=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setLocalePropertiesForFileByPath=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setLocalePropertiesForFile=PROPAGATION_REQUIRED
        org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteLocalePropertiesForFile=PROPAGATION_REQUIRED
      </value>
    </property>
  </bean>

  <bean id="IDatabaseDialectService" class="org.pentaho.database.service.DatabaseDialectService" scope="singleton"/>

  <bean id="IDatasourceMgmtService" class="org.pentaho.platform.repository.JcrBackedDatasourceMgmtService"
        scope="singleton">
    <constructor-arg ref="unifiedRepository"/>
    <constructor-arg ref="IDatabaseDialectService"/>
  </bean>

  <bean id="unifiedRepository" class="org.pentaho.platform.repository2.unified.ExceptionLoggingDecorator">
    <constructor-arg ref="unifiedRepositoryProxy"/>
    <constructor-arg>
      <util:map>
        <entry key="org.springframework.security.access.AccessDeniedException">
          <bean class="org.pentaho.platform.repository2.unified.exception.AccessDeniedExceptionConverter"/>
        </entry>
        <entry key="org.pentaho.platform.repository2.unified.exception.RepositoryFileDaoFileExistsException">
          <bean class="org.pentaho.platform.repository2.unified.exception.FileExistsExceptionConverter"/>
        </entry>
        <entry key="org.pentaho.platform.repository2.unified.exception.RepositoryFileDaoReferentialIntegrityException">
          <bean class="org.pentaho.platform.repository2.unified.exception.ReferentialIntegrityExceptionConverter"/>
        </entry>
        <entry key="org.pentaho.platform.repository2.unified.exception.RepositoryFileDaoMalformedNameException">
          <bean class="org.pentaho.platform.repository2.unified.exception.MalformedNameExceptionConverter"/>
        </entry>
      </util:map>
    </constructor-arg>
  </bean>

  <bean id="unifiedRepositoryProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="unifiedRepositoryTarget"/>
    <property name="interceptorNames">
      <list>
        <idref bean="unifiedRepositoryTransactionInterceptor"/>
        <idref bean="unifiedRepositoryMethodInterceptor"/>
      </list>
    </property>
  </bean>

  <bean id="tenantMgrProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="ITenantManager"/>
    <property name="interceptorNames">
      <list>
        <idref bean="tenantManagerMethodInterceptor"/>
        <idref bean="unifiedRepositoryTransactionInterceptor"/>
      </list>
    </property>
  </bean>

  <bean id="tenantMgrTxn" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="ITenantManager"/>
    <property name="interceptorNames">
      <list>
        <idref bean="unifiedRepositoryTransactionInterceptor"/>
      </list>
    </property>
  </bean>

  <bean id="userRoleDaoProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="userRoleDao"/>
    <property name="interceptorNames">
      <list>
        <idref bean="userRoleDaoMethodInterceptor"/>
        <idref bean="userRoleDaoTransactionInterceptor"/>
      </list>
    </property>
  </bean>

  <bean id="userRoleDaoTxn" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="userRoleDao"/>
    <property name="interceptorNames">
      <list>
        <idref bean="userRoleDaoTransactionInterceptor"/>
      </list>
    </property>
  </bean>

  <!-- The username to use to do internal work for no particular user. -->
  <!-- See Jackrabbit repository.xml adminId -->
  <bean id="repositoryAdminUsername" class="java.lang.String">
    <constructor-arg value="%{repositoryAdminUsername}"/>
  </bean>

  <!-- This token allows Jackrabbit to trust that this application has already authenticated the user. -->
  <bean id="jcrPreAuthenticationToken" class="java.lang.String">
    <constructor-arg value="ZchBOvP8q9FQ"/>
  </bean>

  <!-- The name of the authority which is granted to all authenticated users of a particular tenant. -->
  <bean id="singleTenantAuthenticatedAuthorityName" class="java.lang.String">
    <constructor-arg value="%{singleTenantAuthenticatedAuthorityName}"/>
  </bean>

  <!-- The name of the authority which is granted to all admin users of a particular tenant. -->
  <bean id="singleTenantAdminAuthorityName" class="java.lang.String">
    <constructor-arg value="%{singleTenantAdminAuthorityName}"/>
  </bean>

  <!-- The name of the authority which is granted to all non-authenticated users of a particular tenant -->
  <bean id="singleTenantAnonymousAuthorityName" class="java.lang.String">
    <constructor-arg value="%{singleTenantAnonymousAuthorityName}"/>
  </bean>

  <!-- The set of authorities that are considered system and cannot be removed -->
  <util:list id="singleTenantSystemAuthorities" list-class="java.util.ArrayList" value-type="java.lang.String">
    <ref bean="singleTenantAuthenticatedAuthorityName"/>
    <ref bean="singleTenantAdminAuthorityName"/>
    <ref bean="singleTenantAnonymousAuthorityName"/>
  </util:list>

  <util:list id="extraSystemAuthorities" list-class="java.util.ArrayList" value-type="java.lang.String">
    <ref bean="singleTenantAuthenticatedAuthorityName"/>
    <ref bean="singleTenantAnonymousAuthorityName"/>
  </util:list>


  <bean id="superAdminAuthorityName" class="java.lang.String">
    <constructor-arg value="%{superAdminAuthorityName}"/>
  </bean>

  <bean id="superAdminUserName" class="java.lang.String">
    <constructor-arg value="%{superAdminUserName}"/>
  </bean>

  <bean id="systemTenantAdminUserName" class="java.lang.String">
    <constructor-arg value="%{systemTenantAdminUserName}"/>
  </bean>

  <bean id="systemTenantAdminPassword" class="java.lang.String">
    <constructor-arg value="%{systemTenantAdminPassword}"/>
  </bean>

  <bean id="singleTenantAdminUserName" class="java.lang.String">
    <constructor-arg value="%{singleTenantAdminUserName}"/>
  </bean>

  <!-- Used in code that doesn't use Spring's transaction interception. -->
  <!-- The code sets the propagation behavior to PROPAGATION_REQUIRES_NEW. -->
  <bean id="jcrTransactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
    <constructor-arg ref="jcrTransactionManager"/>
  </bean>

  <bean id="ITenantManager" class="org.pentaho.platform.repository2.mt.RepositoryTenantManager">
    <constructor-arg ref="repositoryFileDao"/>
    <constructor-arg ref="userRoleDao"/>
    <constructor-arg ref="repositoryFileAclDao"/>
    <!-- bypassing role binding dao layer for session management and method level security checks this stuff is managed by the tenant mgr-->
    <constructor-arg ref="roleAuthorizationPolicyRoleBindingDaoTxn"/>
    <constructor-arg ref="jcrTemplate"/>
    <constructor-arg ref="repositoryAdminUsername"/>
    <constructor-arg ref="singleTenantAuthenticatedAuthorityName"/>
    <constructor-arg ref="tenantedUserNameUtils"/>
    <constructor-arg ref="tenantedRoleNameUtils"/>
    <constructor-arg ref="singleTenantAdminAuthorityName"/>
    <constructor-arg ref="singleTenantAuthenticatedAuthorityRoleBindingList"/>
  </bean>

  <bean id="defaultBackingRepositoryLifecycleManager"
        class="org.pentaho.platform.repository2.unified.lifecycle.DefaultBackingRepositoryLifecycleManager">
    <constructor-arg ref="repositoryFileDao"/>
    <constructor-arg ref="repositoryFileAclDao"/>
    <constructor-arg ref="jcrTransactionTemplate"/>
    <constructor-arg ref="repositoryAdminUsername"/>
    <constructor-arg ref="systemTenantAdminUserName"/>
    <constructor-arg ref="systemTenantAdminPassword"/>
    <constructor-arg ref="singleTenantAdminAuthorityName"/>
    <constructor-arg ref="singleTenantAuthenticatedAuthorityName"/>
    <constructor-arg ref="singleTenantAnonymousAuthorityName"/>
    <constructor-arg ref="IPasswordService"/>
    <constructor-arg ref="adminJcrTemplate"/>
    <constructor-arg ref="pathConversionHelper"/>
    <property name="tenantManager" ref="tenantMgrTxn"/>
    <property name="userRoleDao" ref="userRoleDaoTxn"/>
  </bean>

  <!-- PentahoMetadataRepositoryLifecycleManager is located in platform-extensions -->
  <!-- <bean id="metadataRepositoryLifecycleManager"
        class="org.pentaho.platform.plugin.services.metadata.PentahoMetadataRepositoryLifecycleManager">
    <constructor-arg ref="repositoryFileDao"/>
    <constructor-arg ref="repositoryFileAclDao"/>
    <constructor-arg ref="jcrTransactionTemplate"/>
    <constructor-arg ref="repositoryAdminUsername"/>
    <constructor-arg ref="singleTenantAuthenticatedAuthorityName"/>
    <constructor-arg ref="tenantedUserNameUtils"/>
    <constructor-arg ref="adminJcrTemplate"/>
    <constructor-arg ref="pathConversionHelper"/>
  </bean> -->

  <bean id="defaultUserRepositoryLifecycleManager"
        class="org.pentaho.platform.repository2.unified.lifecycle.DefaultUserRepositoryLifecycleManager">
    <constructor-arg ref="roleAuthorizationPolicyRoleBindingDaoTxn"/>
    <constructor-arg ref="IPasswordService"/>
    <constructor-arg ref="userRoleDaoTxn"/>
    <constructor-arg ref="singleTenantAdminUserName"/>
    <constructor-arg ref="singleTenantSystemAuthorities"/>
    <constructor-arg ref="jcrTransactionTemplate"/>
    <constructor-arg ref="adminJcrTemplate"/>
    <constructor-arg ref="pathConversionHelper"/>
    <property name="roleMappings" ref="role-mappings"/>
    <property name="userRoleMappings" ref="defaultUserRoleMappings"/>
    <property name="singleTenantAdminPassword" ref="defaultAdminUserPassword"/>
    <property name="nonAdminPassword" ref="defaultNonAdminUserPassword"/>
  </bean>

  <bean id="mondrianBackingRepositoryLifecycleManager"
        class="org.pentaho.platform.repository2.unified.lifecycle.MondrianBackingRepositoryLifecycleManager">
    <constructor-arg ref="repositoryFileDao"/>
    <constructor-arg ref="repositoryFileAclDao"/>
    <constructor-arg ref="jcrTransactionTemplate"/>
    <constructor-arg ref="repositoryAdminUsername"/>
    <constructor-arg ref="singleTenantAuthenticatedAuthorityName"/>
    <constructor-arg ref="tenantedUserNameUtils"/>
    <constructor-arg ref="adminJcrTemplate"/>
    <constructor-arg ref="pathConversionHelper"/>
  </bean>

  <bean id="backingRepositoryLifecycleManager"
        class="org.pentaho.platform.repository2.unified.lifecycle.DelegatingBackingRepositoryLifecycleManager" lazy-init="true">
    <constructor-arg>
      <list>
        <ref bean="defaultBackingRepositoryLifecycleManager"/>
        <ref bean="defaultUserRepositoryLifecycleManager"/>
        <!-- <ref bean="metadataRepositoryLifecycleManager"/> --> <!-- PentahoMetadataRepositoryLifecycleManager is located in platform-extensions -->
        <ref bean="mondrianBackingRepositoryLifecycleManager"/>
      </list>
    </constructor-arg>
  </bean>
  <bean id="tenantedRoleNameUtils"
        class="org.pentaho.platform.security.userroledao.DefaultTenantedPrincipleNameResolver">
    <property name="delimeter" value="_"/>
  </bean>

  <bean id="tenantedUserNameUtils"
        class="org.pentaho.platform.security.userroledao.DefaultTenantedPrincipleNameResolver">
  </bean>

  <bean id="unifiedRepositoryTarget" class="org.pentaho.platform.repository2.unified.DefaultUnifiedRepository">
    <constructor-arg ref="repositoryFileDao"/>
    <constructor-arg ref="repositoryFileAclDao"/>
  </bean>

  <bean id="unifiedRepositoryMethodInterceptor"
        class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
    <property name="validateConfigAttributes">
      <value>true</value>
    </property>
    <property name="authenticationManager">
      <ref bean="authenticationManager"/>
    </property>
    <property name="accessDecisionManager">
      <ref bean="businessAccessDecisionManager"/>
    </property>
    <property name="securityMetadataSource">
      <sec:method-security-metadata-source>
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileAtVersion" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileById" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForRead" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForReadInBatch" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataAtVersionForRead" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForExecute" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataForExecuteInBatch" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDataAtVersionForExecute" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.createFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.createFolder" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getChildren" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateFolder" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAcl" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.hasAccess" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getEffectiveAces" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.updateAcl" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.lockFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.unlockFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.canUnlockFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.restoreFileAtVersion" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummary" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummaryInBatch" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getVersionSummaries" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteFileAtVersion" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.undeleteFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDeletedFiles" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getDeletedFiles" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.moveFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.copyFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getTree" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getReferrers" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setFileMetadata" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getFileMetadata" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAvailableLocalesForFileById" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAvailableLocalesForFileByPath" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getAvailableLocalesForFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getLocalePropertiesForFileById" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getLocalePropertiesForFileByPath" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.getLocalePropertiesForFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setLocalePropertiesForFileById" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setLocalePropertiesForFileByPath" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.setLocalePropertiesForFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
        <sec:protect method="org.pentaho.platform.api.repository2.unified.IUnifiedRepository.deleteLocalePropertiesForFile" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
      </sec:method-security-metadata-source>
    </property>
  </bean>


  <!-- Jackrabbit repo automatically shut down when Spring application context closed (DisposableBean) -->
  <bean id="jcrRepository" class="org.springframework.extensions.jcr.jackrabbit.RepositoryFactoryBean">
    <property name="configuration" value="/jackrabbit/repository.xml"/>
    <property name="homeDir" value="/jackrabbit/repository"/>
  </bean>

  <bean id="jcrAdminCredentialsStrategy"
        class="org.pentaho.platform.repository2.unified.jcr.sejcr.ConstantCredentialsStrategy">
    <constructor-arg ref="repositoryAdminUsername"/>
    <constructor-arg ref="jcrPreAuthenticationToken"/>
  </bean>

  <bean id="jcrSessionFactory"
        class="org.pentaho.platform.repository2.unified.jcr.sejcr.CredentialsStrategySessionFactory">
    <constructor-arg ref="jcrRepository"/>
    <constructor-arg>
      <bean class="org.pentaho.platform.repository2.unified.jcr.sejcr.PentahoSessionCredentialsStrategy">
        <constructor-arg ref="jcrPreAuthenticationToken"/>
        <constructor-arg ref="tenantedUserNameUtils"/>
      </bean>
    </constructor-arg>
    <constructor-arg ref="jcrAdminCredentialsStrategy"/>
    <property name="namespaces">
      <props>
        <prop key="pho">http://www.pentaho.org/jcr/2.0</prop>
        <prop key="pho_nt">http://www.pentaho.org/jcr/nt/2.0</prop>
        <prop key="pho_mix">http://www.pentaho.org/jcr/mix/2.0</prop>
      </props>
    </property>
    <!-- order matters! -->
    <property name="nodeTypeDefinitionProviders">
      <list>
        <bean class="org.pentaho.platform.repository2.unified.jcr.sejcr.ntdproviders.InternalFolderNtdProvider"/>
        <bean class="org.pentaho.platform.repository2.unified.jcr.sejcr.ntdproviders.LocalizedStringNtdProvider"/>
        <bean class="org.pentaho.platform.repository2.unified.jcr.sejcr.ntdproviders.HierarchyNodeNtdProvider"/>
        <bean class="org.pentaho.platform.repository2.unified.jcr.sejcr.ntdproviders.FileNtdProvider"/>
        <bean class="org.pentaho.platform.repository2.unified.jcr.sejcr.ntdproviders.FolderNtdProvider"/>
        <bean class="org.pentaho.platform.repository2.unified.jcr.sejcr.ntdproviders.LockTokenStorageNtdProvider"/>
        <bean class="org.pentaho.platform.repository2.unified.jcr.sejcr.ntdproviders.VersionableNtdProvider"/>
        <bean class="org.pentaho.platform.repository2.unified.jcr.sejcr.ntdproviders.LocaleNtdProvider"/>
      </list>
    </property>
  </bean>

  <bean id="jcrTemplate" class="org.pentaho.platform.repository2.unified.jcr.sejcr.PentahoJcrTemplate">
    <property name="sessionFactory" ref="jcrSessionFactory"/>
    <property name="allowCreate" value="true"/>
    <property name="exposeNativeSession" value="true"/>
  </bean>

  <bean id="repositoryAccessVoterManager"
        class="org.pentaho.platform.repository2.unified.RepositoryAccessVoterManager">
    <constructor-arg ref="authorizationPolicy"/>
    <constructor-arg ref="repositoryAdminUsername"/>
  </bean>
  <!--
  	The repository file dao implementation. 
   -->
  <bean id="repositoryFileDao" class="org.pentaho.platform.repository2.unified.jcr.JcrRepositoryFileDao">
    <constructor-arg ref="jcrTemplate"/>
    <constructor-arg ref="transformers"/>
    <constructor-arg ref="ILockHelper"/>
    <constructor-arg>
      <bean class="org.pentaho.platform.repository2.unified.jcr.DefaultDeleteHelper">
        <constructor-arg ref="ILockHelper"/>
        <constructor-arg ref="pathConversionHelper"/>
      </bean>
    </constructor-arg>
    <constructor-arg ref="pathConversionHelper"/>
    <constructor-arg ref="repositoryFileAclDao"/>
    <constructor-arg ref="defaultAclHandler"/>
    <constructor-arg ref="repositoryAccessVoterManager"/>
  </bean>

  <util:list id="transformers">
    <bean class="org.pentaho.platform.repository2.unified.jcr.transform.SampleRepositoryFileDataTransformer"/>
    <bean class="org.pentaho.platform.repository2.unified.jcr.transform.SimpleRepositoryFileDataTransformer"/>
    <bean class="org.pentaho.platform.repository2.unified.jcr.transform.NodeRepositoryFileDataTransformer"/>
  </util:list>

  <bean id="ILockHelper" class="org.pentaho.platform.repository2.unified.jcr.DefaultLockHelper">
    <constructor-arg ref="tenantedUserNameUtils"/>
    <pen:publish as-type="INTERFACES"/>
  </bean>
  <bean id="pathConversionHelper" class="org.pentaho.platform.repository2.unified.jcr.DefaultPathConversionHelper"/>

  <bean
      class="org.pentaho.platform.repository2.unified.spring.BackingRepositoryLifecycleManagerAuthenticationSuccessListener"/>
  <bean id="defaultAclHandler" class="org.pentaho.platform.repository2.unified.jcr.InheritDefaultAclHandler"/>

  <bean id="repositoryFileAclDao"
        class="org.pentaho.platform.repository2.unified.jcr.JcrRepositoryFileAclDao">
    <constructor-arg ref="jcrTemplate"/>
    <constructor-arg ref="pathConversionHelper"/>
    <constructor-arg ref="singleTenantAdminAuthorityName"/>
  </bean>

  <!-- begin authorization policy -->

  <bean id="authorizationPolicy" class="org.pentaho.platform.security.policy.rolebased.RoleAuthorizationPolicy">
    <!--
      authorization policy should not be blocked by security checks (because it is involved in doing the security
      checks!)
    -->
    <constructor-arg ref="roleAuthorizationPolicyRoleBindingDaoTxn"/>
  </bean>

  <bean id="roleBindingDaoTransactionInterceptor"
        class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <property name="transactionManager" ref="jcrTransactionManager"/>
    <property name="transactionAttributeSource">
      <value>
        org.pentaho.platform.security.policy.rolebased.IRoleAuthorizationPolicyRoleBindingDao.getRoleBindingStruct=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.security.policy.rolebased.IRoleAuthorizationPolicyRoleBindingDao.setRoleBindings=PROPAGATION_REQUIRED
        org.pentaho.platform.security.policy.rolebased.IRoleAuthorizationPolicyRoleBindingDao.getBoundLogicalRoleNames=PROPAGATION_REQUIRED,readOnly
      </value>
    </property>
  </bean>

  <bean id="roleAuthorizationPolicyRoleBindingDaoTarget"
        class="org.pentaho.platform.security.policy.rolebased.JcrRoleAuthorizationPolicyRoleBindingDao">
    <constructor-arg ref="jcrTemplate"/>
    <constructor-arg ref="immutableRoleBindingMap"/>
    <constructor-arg ref="bootstrapRoleBindingMap"/>
    <constructor-arg ref="superAdminAuthorityName"/>
    <constructor-arg ref="tenantedRoleNameUtils"/>
    <!-- <constructor-arg>
      <pen:list class="org.pentaho.platform.api.engine.IAuthorizationAction"/>
    </constructor-arg> -->
    <constructor-arg ref="AuthorizationActions" />
  </bean>


  <!-- Built-In ABS Logical Roles -->
  <bean class="org.pentaho.platform.security.policy.rolebased.actions.RepositoryReadAction" id="RepositoryReadAction">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="50"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.security.policy.rolebased.actions.RepositoryCreateAction" id="RepositoryCreateAction">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="40"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.security.policy.rolebased.actions.SchedulerAction" id="SchedulerAction">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="30"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.security.policy.rolebased.actions.AdministerSecurityAction" id="AdministerSecurityAction">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="20"/>
      </pen:attributes>
    </pen:publish>
  </bean>
  <bean class="org.pentaho.platform.security.policy.rolebased.actions.PublishAction" id="PublishAction">
    <pen:publish as-type="INTERFACES">
      <pen:attributes>
        <pen:attr key="priority" value="0"/>
      </pen:attributes>
    </pen:publish>
  </bean>

    <!-- This is a temporary workaround for a problem where the Actions are not
    being registered with Pentaho system for unit tests -->
    <util:list id="AuthorizationActions">
        <ref bean="RepositoryReadAction"/>
        <ref bean="RepositoryCreateAction"/>
        <ref bean="SchedulerAction"/>
        <ref bean="AdministerSecurityAction"/>
        <ref bean="PublishAction"/>
    </util:list>

  <util:map id="immutableRoleBindingMap">
    <entry key-ref="singleTenantAdminAuthorityName">
        <ref bean="AuthorizationActions"/>
    </entry>
    <entry key-ref="superAdminAuthorityName">
      <ref bean="AuthorizationActions"/>
    </entry>
  </util:map>

  <util:map id="bootstrapRoleBindingMap">
    <entry key-ref="singleTenantAuthenticatedAuthorityName">
      <util:list>
        <value>org.pentaho.repository.read</value>
        <value>org.pentaho.repository.create</value>
        <value>org.pentaho.scheduler.manage</value>
      </util:list>
    </entry>
    <!-- for single tenant mode -->
  </util:map>

  <util:list id="singleTenantAuthenticatedAuthorityRoleBindingList">
    <value>org.pentaho.repository.read</value>
    <value>org.pentaho.repository.create</value>
    <value>org.pentaho.scheduler.manage</value>
  </util:list>

  <bean id="roleAuthorizationPolicyRoleBindingDaoTxn" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="roleAuthorizationPolicyRoleBindingDaoTarget"/>
    <property name="interceptorNames">
      <list>
        <idref bean="roleBindingDaoTransactionInterceptor"/>
      </list>
    </property>
  </bean>

  <bean id="roleAuthorizationPolicyRoleBindingDao" class="org.springframework.aop.framework.ProxyFactoryBean">
    <property name="target" ref="roleAuthorizationPolicyRoleBindingDaoTarget"/>
    <property name="interceptorNames">
      <list>
        <idref bean="roleAuthorizationPolicyRoleBindingDaoMethodInterceptor"/>
      </list>
    </property>
  </bean>

  <bean id="roleAuthorizationPolicyRoleBindingDaoMethodInterceptor"
        class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
    <property name="validateConfigAttributes">
      <value>true</value>
    </property>
    <property name="authenticationManager">
      <ref bean="authenticationManager"/>
    </property>
    <property name="accessDecisionManager">
      <ref bean="businessAccessDecisionManager"/>
    </property>
    <property name="securityMetadataSource">
      <sec:method-security-metadata-source>
        <sec:protect method="org.pentaho.platform.security.policy.rolebased.IRoleAuthorizationPolicyRoleBindingDao.getRoleBindingStruct" access="VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity" />
        <sec:protect method="org.pentaho.platform.security.policy.rolebased.IRoleAuthorizationPolicyRoleBindingDao.setRoleBindings" access="VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity" />
      </sec:method-security-metadata-source>
    </property>
  </bean>

  <!-- An access decision voter that reads VOTE_AUTHZ_POLICY_* configuration settings
-->
  <bean id="authorizationPolicyVoter"
        class="org.pentaho.platform.security.policy.rolebased.springsecurity.AuthorizationPolicyVoter">
    <constructor-arg ref="authorizationPolicy"/>
    <constructor-arg value="VOTE_AUTHZ_POLICY_"/>
  </bean>


  <bean id="adminJcrTemplate" class="org.springframework.extensions.jcr.JcrTemplate">
    <property name="sessionFactory" ref="jcrAdminSessionFactory"/>
    <property name="allowCreate" value="false"/>
    <property name="exposeNativeSession" value="true"/>
  </bean>


  <bean id="tenantManagerMethodInterceptor"
        class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
    <property name="validateConfigAttributes">
      <value>true</value>
    </property>
    <property name="authenticationManager">
      <ref bean="authenticationManager"/>
    </property>
    <property name="accessDecisionManager">
      <ref bean="businessAccessDecisionManager"/>
    </property>
    <property name="securityMetadataSource">
      <sec:method-security-metadata-source>
        <sec:protect method="org.pentaho.platform.api.mt.ITenantManager.createTenant" access="VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity" />
        <sec:protect method="org.pentaho.platform.api.mt.ITenantManager.getChildTenants" access="VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity" />
        <sec:protect method="org.pentaho.platform.api.mt.ITenantManager.updateTentant" access="VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity" />
        <sec:protect method="org.pentaho.platform.api.mt.ITenantManager.deleteTenant" access="VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity" />
        <sec:protect method="org.pentaho.platform.api.mt.ITenantManager.enableTenant" access="VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity" />
        <sec:protect method="org.pentaho.platform.api.mt.ITenantManager.isSubTenant" access="VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity" />
        <sec:protect method="org.pentaho.platform.api.mt.ITenantManager.getTenantRootFolder" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
        <sec:protect method="org.pentaho.platform.api.mt.ITenantManager.getTenant" access="VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity" />
        <sec:protect method="org.pentaho.platform.api.mt.ITenantManager.createUserHomeFolder" access="VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity" />
        <sec:protect method="org.pentaho.platform.api.mt.ITenantManager.getUserHomeFolder" access="VOTE_AUTHZ_POLICY_org.pentaho.security.administerSecurity" />
      </sec:method-security-metadata-source>
    </property>
  </bean>


  <bean id="userRoleDaoTransactionInterceptor"
        class="org.springframework.transaction.interceptor.TransactionInterceptor">
    <property name="transactionManager" ref="jcrAdminTransactionManager"/>
      <property name="transactionAttributeSource">
      <value>
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.createUser=PROPAGATION_REQUIRED
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.setPassword=PROPAGATION_REQUIRED
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.setUserDescription=PROPAGATION_REQUIRED
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.deleteUser=PROPAGATION_REQUIRED
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.getUser=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.getUsers=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.createRole=PROPAGATION_REQUIRED
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.setRoleDescription=PROPAGATION_REQUIRED
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.deleteRole=PROPAGATION_REQUIRED
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.getRole=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.getRoles=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.setRoleMembers=PROPAGATION_REQUIRED
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.setUserRoles=PROPAGATION_REQUIRED
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.getRoleMembers=PROPAGATION_REQUIRED,readOnly
        org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.getUserRoles=PROPAGATION_REQUIRED,readOnly
      </value>
    </property>
  </bean>


  <bean id="userRoleDaoMethodInterceptor"
        class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
    <property name="validateConfigAttributes">
      <value>true</value>
    </property>
    <property name="authenticationManager">
      <ref bean="authenticationManager"/>
    </property>
    <property name="accessDecisionManager">
      <ref bean="businessAccessDecisionManager"/>
    </property>
    <property name="securityMetadataSource">
      <sec:method-security-metadata-source>
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.createUser" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.setPassword" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.setUserDescription" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.deleteUser" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.getUsers" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.createRole" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.setRoleDescription" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.deleteRole" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.getRole" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.getRoles" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.setRoleMembers" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.setUserRoles" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.create" />
          <sec:protect method="org.pentaho.platform.api.engine.security.userroledao.IUserRoleDao.getRoleMembers" access="VOTE_AUTHZ_POLICY_org.pentaho.repository.read" />
      </sec:method-security-metadata-source>
    </property>
  </bean>

  <bean id="jcrAdminSessionHolderProvider"
        class="org.springframework.extensions.jcr.jackrabbit.support.JackRabbitSessionHolderProvider">
  </bean>

  <bean id="jcrAdminSessionHolderProviderMgr"
        class="org.pentaho.platform.repository2.unified.jcr.sejcr.JackrabbitListSessionHolderProviderManager">
    <property name="providers">
      <list>
        <bean class="org.springframework.extensions.jcr.jackrabbit.support.JackRabbitSessionHolderProvider">
        </bean>
      </list>
    </property>
  </bean>

  <bean id="jcrAdminSessionFactory"
        class="org.pentaho.platform.repository2.unified.jcr.sejcr.CredentialsStrategySessionFactory">
    <constructor-arg ref="jcrRepository"/>
    <constructor-arg ref="jcrAdminCredentialsStrategy"/>
    <property name="sessionHolderProviderManager">
      <ref bean="jcrAdminSessionHolderProviderMgr"/>
    </property>
  </bean>

  <!-- IUserRoleDao implementation -->
  <bean id="userRoleDao" class="org.pentaho.test.mock.MockUserRoleDao">
    <constructor-arg ref="tenantedUserNameUtils"/>
    <constructor-arg ref="tenantedRoleNameUtils"/>
    <constructor-arg ref="singleTenantAuthenticatedAuthorityName"/>
  </bean>
   
  <bean id="RepositoryFileProxyFactory" class="org.pentaho.platform.repository2.unified.jcr.RepositoryFileProxyFactory">
    <constructor-arg ref="jcrTemplate"/>
    <constructor-arg ref="repositoryFileDao"/>
  </bean>

  <!-- end authorization policy -->
  <!-- Property to enable of disable multi-byte encoding -->
  <bean class="java.lang.Boolean" id="useMultiByteEncoding">
    <constructor-arg value="${repository.useMultiByteEncoding}"/>
    <pen:publish as-type="INTERFACES"/>
  </bean>
</beans>