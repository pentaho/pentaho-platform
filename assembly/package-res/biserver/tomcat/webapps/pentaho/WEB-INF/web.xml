<?xml version="1.0"?>
<!DOCTYPE web-app PUBLIC
    "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
    "http://java.sun.com/dtd/web-app_2_3.dtd">

<web-app>

  <context-param>
    <param-name>solution-path</param-name>
    <param-value></param-value>
  </context-param>

  <!--
    <context-param> <param-name>pentaho-system-cfg</param-name>
  -->
  <!--  This context parameter is being deprecated. We don't use this any more. We have added a new context parameter called fully-qualified-server-url -->
  <context-param>
    <param-name>base-url</param-name>
    <param-value></param-value>
  </context-param>

  <!--  FullyQualifiedServerUrl is used only in the case of offline content generation and whenever something need to talk back to the server -->
  <context-param>
    <param-name>fully-qualified-server-url</param-name>
    <param-value>http://localhost:8080/pentaho/</param-value>
  </context-param>

  <context-param>
    <param-name>locale-language</param-name>
    <!-- for example 'fr' for French, 'de' for German, da for danish -->
    <param-value></param-value>
  </context-param>

  <context-param>
    <param-name>locale-country</param-name>
    <!-- for example 'FR' for France, 'CA' for Canada -->
    <param-value></param-value>
  </context-param>
  <context-param>
    <param-name>contextClass</param-name>
    <param-value>org.pentaho.platform.web.http.context.PentahoSolutionSpringApplicationContext</param-value>
  </context-param>

  <context-param>
    <param-name>contextConfigLocation</param-name>
    <!-- This file is relative to the "system" folder within your pentaho solutions folder. -->
    <!-- Instead of adding files here, add them as imports to pentaho-spring-beans.xml. -->
    <param-value>pentaho-spring-beans.xml</param-value>
  </context-param>

  <context-param>
    <param-name>pentahoObjectFactory</param-name>
    <param-value>org.pentaho.platform.web.http.context.WebSpringPentahoObjectFactory</param-value>
  </context-param>

  <!--
    This defaults to UTF-8. Uncomment this section and change the value
    for other encodings. Also change the URIEncoding in Tomcat's
    server.xml.
  -->
  <context-param>
    <param-name>encoding</param-name>
    <param-value>UTF-8</param-value>
  </context-param>

  <!--
    this defaults to LTR (left to right), uncomment this section and
    change the value for other text directions <context-param>
    <param-name>text-direction</param-name> <param-value>RTL</param-value>
    </context-param>
  -->

  <!-- [BEGIN HSQLDB DATABASES] -->
  <context-param>
    <param-name>hsqldb-databases</param-name>
    <param-value>sampledata@../../data/hsqldb/sampledata,hibernate@../../data/hsqldb/hibernate,quartz@../../data/hsqldb/quartz</param-value>
  </context-param>
  <!-- [END HSQLDB DATABASES] -->

  <!-- insert additional context-params -->

  <filter> <!-- This must be the first filter listed in the web.xml -->
    <filter-name>Set Character Encoding Filter</filter-name>
    <filter-class>org.pentaho.platform.web.http.filters.PentahoAwareCharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>ignore</param-name>
      <param-value>yes</param-value>
    </init-param>
  </filter>

  <!-- Pentaho Request Context Filter is use to extract the Context Path from Servlet Request and store it in the PentahoRequestContextHolder.
  This is needed to get the relative path to the server for online content generation and requesting of resources.
   -->

  <filter>
    <filter-name>Pentaho Request Context Filter</filter-name>
    <filter-class>org.pentaho.platform.web.http.filters.PentahoRequestContextFilter</filter-class>
  </filter>

  <filter>
    <filter-name>WEBAPP_ROOT URL rewrite filter</filter-name>
    <filter-class>org.pentaho.platform.web.http.filters.WebappRootForwardingFilter</filter-class>
  </filter>

  <filter>
    <filter-name>Spring Security Filter Chain Proxy</filter-name>
    <filter-class>org.springframework.security.util.FilterToBeanProxy</filter-class>
    <init-param>
      <param-name>targetBean</param-name>
      <param-value>filterChainProxy</param-value>
    </init-param>
  </filter>

  <filter>
    <filter-name>SystemStatusFilter</filter-name>
    <filter-class>org.pentaho.platform.web.http.filters.SystemStatusFilter</filter-class>
    <init-param>
      <param-name>initFailurePage</param-name>
      <param-value>InitFailure</param-value>
      <description>This page is displayed if the PentahoSystem fails to
        properly initialize.</description>
    </init-param>
  </filter>

  <filter>
    <filter-name>Proxy Trusting Filter</filter-name>
    <filter-class>org.pentaho.platform.web.http.filters.ProxyTrustingFilter</filter-class>
    <init-param>
      <param-name>TrustedIpAddrs</param-name>
      <param-value>127.0.0.1,0\:0\:0\:0\:0\:0\:0\:1(%.+)*$</param-value>
      <description>Comma separated list of IP addresses of a trusted hosts.</description>
    </init-param>
  </filter>

  <!--  Pentaho Web Context Filter checks to see if webcontext.js is being requested. It writes the content of webcontext.js
        webcontext.js contains value for CONTEXT_PATH and FULLY_QUALIFIED_SERVER_URL
    -->
  <filter>
    <filter-name>Pentaho Web Context Filter</filter-name>
    <filter-class>org.pentaho.platform.web.http.filters.PentahoWebContextFilter</filter-class>
  </filter>

  <!-- insert additional filters -->

  <filter-mapping>
    <filter-name>WEBAPP_ROOT URL rewrite filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Set Character Encoding Filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>SystemStatusFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Proxy Trusting Filter</filter-name>
    <url-pattern>/ServiceActionService</url-pattern>
  </filter-mapping>

  <!--
    Filter mapping for security. Note that all objects are locked down. We
    could change this here as desired.
  -->
  <filter-mapping>
    <filter-name>Spring Security Filter Chain Proxy</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Pentaho Request Context Filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Pentaho Web Context Filter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- insert additional filter-mappings -->


  <!-- sets System properties used by the Spring context -->
  <listener>
    <listener-class>org.pentaho.platform.web.http.context.SpringEnvironmentSetupListener</listener-class>
  </listener>
  <!--   enables session and request scoped object creation in Spring -->
  <listener>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>

  <!-- [BEGIN HSQLDB STARTER] -->
  <listener>
    <listener-class>org.pentaho.platform.web.http.context.HsqldbStartupListener</listener-class>
  </listener>
  <!-- [END HSQLDB STARTER] -->

  <listener>
    <listener-class>org.pentaho.platform.web.http.session.PentahoHttpSessionListener</listener-class>
  </listener>

  <!-- NEXT TWO LISTENERS ARE ORDER DEPENDENT -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <listener>
    <listener-class>org.pentaho.platform.web.http.context.SolutionContextListener</listener-class>
  </listener>
  <!-- END OF ORDER DEPENDENCE -->

  <listener>
    <listener-class>org.springframework.security.ui.session.HttpSessionEventPublisher</listener-class>
  </listener>

  <listener>
    <listener-class>org.pentaho.platform.web.http.context.PentahoCacheContextListener</listener-class>
  </listener>

  <listener>
    <listener-class>org.pentaho.platform.web.http.session.PentahoCacheSessionListener</listener-class>
  </listener>

  <listener>
    <listener-class>net.sf.ehcache.constructs.web.ShutdownListener</listener-class>
  </listener>

  <!-- insert additional listeners -->

  <servlet>
    <servlet-name>ViewAction</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.ViewAction</servlet-class>
  </servlet>
  <servlet>
    <servlet-name>SolutionEngineInteractivityService</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.SolutionEngineInteractivityService</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>content</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.UIServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>ServiceAction</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.HttpWebService</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>GetImage</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.GetImage</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>Xmla</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.PentahoXmlaServlet</servlet-class>
    <init-param>
      <param-name>DataSourcesConfig</param-name>
      <param-value>${pentaho.solutionpath}${pentaho.olap.xmladatasources}</param-value>
    </init-param>
    <init-param>
      <param-name>CharacterEncoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </servlet>

  <servlet>
    <servlet-name>RepositoryFilePublisher</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.RepositoryFilePublisher</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>GenericServlet</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.GenericServlet</servlet-class>
    <init-param>
      <param-name>showDeprecationMessage</param-name>
      <param-value>true</param-value>
    </init-param>
  </servlet>

  <servlet>
    <servlet-name>GwtRpcPluginProxyServlet</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.GwtRpcPluginProxyServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>GwtRpcProxyServlet</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.GwtRpcProxyServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>PluggableUploadFileServlet</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.PluggableUploadFileServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>PluginDispatchServlet</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.PluginDispatchServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>Home</servlet-name>
    <jsp-file>/mantle/Mantle.jsp</jsp-file>
  </servlet>

  <servlet>
    <servlet-name>DebugHome</servlet-name>
    <jsp-file>/mantle/MantleDebug.jsp</jsp-file>
  </servlet>

  <servlet>
    <servlet-name>InitFailure</servlet-name>
    <jsp-file>/jsp/InitFailure.jsp</jsp-file>
  </servlet>

  <!--   Temporary fix for GWT localization BISERVER-3640 -->
  <servlet>
    <servlet-name>BrowserLocale</servlet-name>
    <jsp-file>/jsp/browserLocale.jsp</jsp-file>
  </servlet>
  <!--   End BISERVER-3640 -->

  <servlet>
    <servlet-name>LocalizationServlet</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.LocalizationServlet</servlet-class>
  </servlet>

  <!-- ================================= merged servlets =================================== -->
  <servlet>
    <servlet-name>CacheExpirationService</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.CacheExpirationService</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>MondrianCatalogPublisher</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.MondrianCatalogPublisher</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>Login</servlet-name>
    <jsp-file>/jsp/PUCLogin.jsp</jsp-file>
    <init-param>
      <param-name>send401List</param-name>
      <param-value>MondrianCatalogPublisher,ServiceActionService,gwtrpc,ws/gwt,mantle/images/spacer.gif</param-value>
      <description>List of things to throw a 401 to when seen in the login</description>
    </init-param>
  </servlet>

  <servlet>
    <servlet-name>Carte</servlet-name>
    <servlet-class>org.pentaho.di.www.CarteServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>GetResource</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.GetResource</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>UploadService</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.UploadFileServlet</servlet-class>
  </servlet>



  <servlet>
    <servlet-name>jaxwsEndpoint-spring</servlet-name>
    <display-name>jaxwsEndpoint-spring</display-name>
    <description>JAX-WS endpoint</description>
    <servlet-class>org.pentaho.platform.web.servlet.PentahoWSSpringServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>jaxrsEndpoint-spring</servlet-name>
    <description>JAX-RS endpoint</description>
    <servlet-class>org.pentaho.platform.web.servlet.JAXRSServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>ThemeServlet</servlet-name>
    <servlet-class>org.pentaho.platform.web.servlet.ThemeServlet</servlet-class>
  </servlet>

  <!-- insert additional servlets -->

  <servlet-mapping>
    <servlet-name>Carte</servlet-name>
    <url-pattern>/kettle/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>jaxwsEndpoint-spring</servlet-name>
    <url-pattern>/webservices/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>jaxrsEndpoint-spring</servlet-name>
    <url-pattern>/api/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>UploadService</servlet-name>
    <url-pattern>/UploadService</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>Xmla</servlet-name>
    <url-pattern>/Xmla</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>GenericServlet</servlet-name>
    <url-pattern>/content/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>GwtRpcPluginProxyServlet</servlet-name>
    <url-pattern>/gwtrpc/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>GwtRpcProxyServlet</servlet-name>
    <url-pattern>/ws/gwt/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>PluggableUploadFileServlet</servlet-name>
    <url-pattern>/upload/*</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>PluginDispatchServlet</servlet-name>
    <url-pattern>/plugin/*</url-pattern>
  </servlet-mapping>

  <!-- Pentaho Servlets -->

  <servlet-mapping>
    <servlet-name>ViewAction</servlet-name>
    <url-pattern>/ViewAction</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>SolutionEngineInteractivityService</servlet-name>
    <url-pattern>/SolutionEngineInteractivityService</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>content</servlet-name>
    <url-pattern>/content</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>ServiceAction</servlet-name>
    <url-pattern>/ServiceAction</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>ServiceAction</servlet-name>
    <url-pattern>/ServiceActionService</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>GetImage</servlet-name>
    <url-pattern>/getImage</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>GetImage</servlet-name>
    <url-pattern>/content/getImage</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>Home</servlet-name>
    <url-pattern>/Home</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>DebugHome</servlet-name>
    <url-pattern>/DebugHome</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>InitFailure</servlet-name>
    <url-pattern>/InitFailure</url-pattern>
  </servlet-mapping>

  <!--   Temporary fix for GWT localization BISERVER-3640 -->
  <servlet-mapping>
    <servlet-name>BrowserLocale</servlet-name>
    <url-pattern>/js/browserLocale.js</url-pattern>
  </servlet-mapping>
  <!--   End BISERVER-3640 -->

  <servlet-mapping>
    <servlet-name>LocalizationServlet</servlet-name>
    <url-pattern>/i18n</url-pattern>
  </servlet-mapping>


  <!-- =============================== merged servlet-mappings ============================= -->

  <servlet-mapping>
    <servlet-name>Login</servlet-name>
    <url-pattern>/Login</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>GetResource</servlet-name>
    <url-pattern>/GetResource</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>GetResource</servlet-name>
    <url-pattern>/content/GetResource</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>CacheExpirationService</servlet-name>
    <url-pattern>/CacheExpirationService</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>MondrianCatalogPublisher</servlet-name>
    <url-pattern>/MondrianCatalogPublisher</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>ThemeServlet</servlet-name>
    <url-pattern>/js/themes.js</url-pattern>
  </servlet-mapping>

  <!-- insert additional servlet mappings -->
  <session-config>
    <session-timeout>120</session-timeout>
  </session-config>

  <mime-mapping>
    <extension>properties</extension>
    <mime-type>text/plain</mime-type>
  </mime-mapping>

  <mime-mapping>
    <extension>js</extension>
    <mime-type>text/javascript</mime-type>
  </mime-mapping>

  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>

  <!-- insert additional tag libs -->

  <resource-ref>
    <description>Quartz Connection</description>
    <res-ref-name>jdbc/Quartz</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>

  <resource-ref>
    <description>Hibernate</description>
    <res-ref-name>jdbc/Hibernate</res-ref-name>
    <res-type>javax.sql.DataSource</res-type>
    <res-auth>Container</res-auth>
  </resource-ref>

  <!-- insert additional resource-refs -->

  <security-constraint>
    <display-name>Default JSP Security Constraints</display-name>
    <web-resource-collection>
      <web-resource-name>Portlet Directory</web-resource-name>
      <url-pattern>/jsp/*</url-pattern>
      <http-method>GET</http-method>
      <http-method>POST</http-method>
    </web-resource-collection>
    <auth-constraint>
      <role-name>PENTAHO_ADMIN</role-name>
    </auth-constraint>
    <user-data-constraint>
      <transport-guarantee>NONE</transport-guarantee>
    </user-data-constraint>
  </security-constraint>


	<error-page>
		<error-code>404</error-code>
		<location>/unavailable.html</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/unavailable.html</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/unavailable.html</location>
	</error-page>


</web-app>
