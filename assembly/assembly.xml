<!-- In order for this build file to be referenced by name on import into other build files, 
     it's much nicer to have a short name with no spaces. Please don't change it. -->
<project name="Open_Assembly" basedir="." default="" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- =================================================================================
       Property Defaults
       Any of these properties can be overridden in either assembly.properties or override.properties
       =================================================================================-->

  <!-- Load the properties files in the proper order -->
  <property file="override.properties"
            description="Properties customized for your development environment belong in this file.  This file will never be checked into the SCM." />
  <property file="assembly.properties"
            description="Properties customized for your particular project belong in this file." />
  
  <property name="prefix" value="" description="Prefix to prepend to bi-platform project folder names"/>

  <!-- subfloor property overrides -->
  <property name="package.id" value="biserver-ce" />
  <!-- the impl properties are used to create the manifest file -->
  <property name="impl.title" value="Pentaho BI Platform Community Edition" />
  <property name="impl.version" value="${project.revision}" />
  <property name="impl.vendor" value="Pentaho Corporation" />

  <!-- Import the ant script that includes targets share between manual and archive-based assemblies -->
  <import file="build-res/assembly_shared.xml" />

  <property name="bi.platform.open.assembly.dir" value="." />

  <!-- custom platform assembly properties -->
  <property name="package.res.dir" value="package-res"/>
  <property name="rdbms" value="hsqldb" description="Default database for open assembly is hsqldb" />
  <property name="stage.dir.server" value="${stage.dir}/${package.id}" />
  <property name="stage.dir.solutions" value="${stage.dir.server}/pentaho-solutions"/>
  <property name="stage.dir.data" value="${stage.dir.server}/data"/>	
  <property name="stage.sampledata.lib.dir" value="${stage.dir.server}/data/lib" />
  <property name="container.stage.dir" value="${stage.dir.server}/tomcat" />
  <property name="container.deploy.dir" value="${stage.dir.server}/tomcat/webapps" />
  <property name="prep.pentaho.war.dir" value="${stage.dir.server}/tomcat/webapps/pentaho" />
  <property name="prep.pentaho.war.lib.dir" value="${prep.pentaho.war.dir}/WEB-INF/lib" />
  <property name="prep.pentaho.war.meta.dir" value="${prep.pentaho.war.dir}/META-INF" />
  <property name="container.lib.dir" value="${stage.dir.server}/tomcat/lib" />
  <property name="plugins.dir" value="plugins" />
  <property name="solution-archives.dir" value="solution-archives" />
  <property name="install-doc.dir" value="${package.res.dir}/install-doc" />
	
  <!-- default relative project paths -->
  <property name="bi.platform.core.dir"       value="../${prefix}core" />
  <property name="bi.platform.extensions.dir" value="../${prefix}extensions" />
  <property name="bi.platform.repository.dir" value="../${prefix}repository" />
  <property name="hibernate.hbm.dir"          value="../${bi.platform.repository.dir}/res/hibernate" />
  <property name="solutions.dir"              value="${package.res.dir}/biserver/pentaho-solutions"/>
  <property name="system.solution.dir"        value="${solutions.dir}/system" />
  <property name="bi-developers.solution.dir" value="${solutions.dir}/bi-developers" />
  <property name="datasource.res.dir" value="${package.res.dir}/appserver/tomcat/res/datasources"/>
  <property name="pentaho-style.dir" value="${package.res.dir}/biserver/tomcat/webapps/pentaho-style"/>	
  <property name="bi-developers.visible" value="true" description="Should the bi-developers samples be visible" />

  <property name="plugin-samples.solution.dir" value="${stage.dir.solutions}/plugin-samples" />
  <property name="plugin-samples.visible" value="true" description="Should the plugin-samples be visible" />

  <property name="user-console.tmp.dir" value="${basedir}/temp" />
  <property name="tomcat.major.version" value="6"/>
  <property name="tomcat.minor.version" value="0.36"/>
  <property name="tomcat.version" value="${tomcat.major.version}.${tomcat.minor.version}"/>
  <property name="tomcat.dir" value="${subfloor.resources.dir}/apache-tomcat-${tomcat.version}" description="Directory where tomcat is deployed"/>
  <property name="third-party.dir" value="${subfloor.resources.dir}/third-party" description="Directory where 3rd party tools are included in the platform assemblies" />
  <property name="wkhtmltoimage.dir" value="${third-party.dir}/wkhtmltoimage" description="Directory where wkhtmltoimage is downloaded"/>

  <property name="pentaho.wars.dir" value="${stage.dir}/pentaho-wars" />

  <property name="kettle-plugins.stage.dir" value="kettle-plugins" />
  <property name="kettle-plugins.dir" value="${solution.dir.server}/system/kettle/plugins" />

  <!-- =================================
          target: clean-all
         ================================= -->
  <target name="clean-all" depends="subfloor.clean-all">
    <delete dir="${plugins.dir}" />
    <delete dir="${solution-archives.dir}" />
    <delete dir="${devlib.dir}" />
    <delete dir="${user-console.tmp.dir}"/>
  </target>


  <!-- =================================
          private target: init.stage.pentaho
         ================================= -->
  <target name="init.stage.pentaho">
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${lib.dir}" />
    <mkdir dir="${stage.dir.server}/tomcat" />
    <mkdir dir="${prep.pentaho.war.dir}" />
    <mkdir dir="${container.deploy.dir}" />
    <mkdir dir="${solution-archives.dir}" />
  </target>



  <target name="ce-build-all"
        depends="clean-all,resolve,assemble,package,war-pentaho,zip-pentaho-style-war,package,zip-pentaho-data,zip-pentaho-solutions"
        description="Performs ce build process"/>

  <!-- ================================= 
          target: assemble
         ================================= -->
  <target name="assemble"
          depends="assemble-no-plugins,install-plugins,install-kettle-plugins"
          description="Assembles an archive-based BIServer community edition"/>

		  
  <!-- =================================
          target: assemble-no-kettle-plugins                      
         ================================= -->
  <target name="assemble-no-kettle-plugins"
          depends="assemble-no-plugins,install-plugins">
    <chmod perm="a+x" dir="${stage.dir}" includes="**/*.sh" />
  </target>  
  
  <!-- =================================
          target: assemble-no-plugins                      
         ================================= -->
  <target name="assemble-no-plugins"
          depends="check-blacklist,assemble-tomcat,assemble-third-party,assemble-pentaho-webapp,install-resources,install-solutions,update-solutions">
    <chmod perm="a+x" dir="${stage.dir}" includes="**/*.sh" />
  </target>


  <!-- ================================= 
            target: package
           ================================= -->
  <target name="package"
          depends="package-zip"
          description="Packages an previously assembled archive-based BIServer community edition" />

  <!--=======================================================================
	      target: tomcat.download-check
         ====================================================================-->
  <target name="tomcat.download-check" 
          description="Fetches tomcat from apache if it is not already present">
    <condition property="tomcat.available">
      <available file="${tomcat.dir}" />
    </condition>
    <antcall target="tomcat.download" />
  </target>

  <!--=======================================================================
          target: tomcat.download
         ====================================================================-->
  <target name="tomcat.download" 
          unless="tomcat.available"
          description="Fetches tomcat from apache">
    <mkdir dir="${subfloor.tmp.dir}" />
    <get src="http://archive.apache.org/dist/tomcat/tomcat-${tomcat.major.version}/v${tomcat.version}/bin/apache-tomcat-${tomcat.version}-windows-x86.zip"
         dest="${subfloor.tmp.dir}/apache-tomcat-${tomcat.version}-windows-x86.zip"
         usetimestamp="true" />
	<unzip src="${subfloor.tmp.dir}/apache-tomcat-${tomcat.version}-windows-x86.zip" dest="${tomcat.dir}/.."/>
  </target>
	
  <!-- =================================
          target: assemble-tomcat
      		This is the primary target for setting up the container structure
      		and the structure for the wars that will go into the container.  This
      		task does not zip, tar or compress.                            
         ================================= -->
  <target name="assemble-tomcat" depends="install-antcontrib,init.stage.pentaho,resolve-datasource-libs,tomcat.download-check">
    <sequential>
      <!-- Copy pure tomcat 6.0 -->
      <copy todir="${stage.dir.server}/tomcat">
        <fileset dir="${tomcat.dir}">
          <exclude name="webapps/docs/**" />
          <exclude name="webapps/examples/**" />
          <exclude name="webapps/host-manager/**" />
          <exclude name="webapps/manager/**" />
          <exclude name="webapps/ROOT/**" />
        </fileset>
      </copy>

      <!-- modify tomcat/conf/server.xml for UTF-8 support -->
      <replace file="${stage.dir.server}/tomcat/conf/server.xml"
      	token="&lt;Connector"
      	value="&lt;Connector URIEncoding=&quot;UTF-8&quot;" />

      <!-- modify the tomcat/conf/context.xml to disable session persistence between restarts -->
      <replaceregexp
          file="${stage.dir.server}/tomcat/conf/context.xml"
          match="\&lt;!--[ \r\n\t]*(\&lt;Manager[ ]*pathname=.*)[ \r\n\t]*--\&gt;"
          replace="\1" />

      <!-- Copy required jars to lib -->
      <mkdir dir="${stage.dir.server}/tomcat/lib" />
      <copy todir="${stage.dir.server}/tomcat/lib">
        <fileset dir="${lib.dir}">
          <include name="jsp-api.jar" />
        </fileset>
      </copy>

      <!-- Add libs pentaho needs in the tomcat lib directory -->
      <copy todir="${stage.dir.server}/tomcat/server/lib">
        <fileset dir="${lib.dir}">
          <include name="cglib*.jar" />
          <include name="jaxen*.jar" />
        </fileset>
      </copy>
    </sequential>

  </target>


  <!--=======================================================================
	      target: third-party.download-check
         ====================================================================-->
  <target name="third-party.download-check"
          description="Fetches third part tools if it is not already present">

    <condition property="wkhtmltoimage.available">
      <available file="${wkhtmltoimage.dir}" />
    </condition>
    <antcall target="wkhtmltoimage.download" />

  </target>

  <!--=======================================================================
          target: wkhtmltoimage.download
         ====================================================================-->
  <target name="wkhtmltoimage.download"
          unless="wkhtmltoimage.available"
          description="Fetches third-party tools">

    <mkdir dir="${wkhtmltoimage.dir}" />

    <!-- get the mac version -->
    <get src="http://wkhtmltopdf.googlecode.com/files/wkhtmltoimage-OSX-0.10.0_rc2-static.tar.bz2"
         dest="${wkhtmltoimage.dir}/wkhtmltoimage_mac.tar.bz2"
         usetimestamp="true" />

    <!-- get the linux amd64 version -->
    <get src="http://wkhtmltopdf.googlecode.com/files/wkhtmltoimage-0.10.0_rc2-static-amd64.tar.bz2"
         dest="${wkhtmltoimage.dir}/wkhtmltoimage_linux_amd64.tar.bz2"
         usetimestamp="true" />

    <!-- get the linux i386 version -->
    <get src="http://wkhtmltopdf.googlecode.com/files/wkhtmltoimage-0.10.0_rc2-static-i386.tar.bz2"
         dest="${wkhtmltoimage.dir}/wkhtmltoimage_linux_i386.tar.bz2"
         usetimestamp="true" />

    <!-- get the windows version -->
    <get src="http://wkhtmltopdf.googlecode.com/files/wkhtmltox-0.10.0_rc2-installer.exe"
         dest="${wkhtmltoimage.dir}/wkhtmltoimage_windows_installer.exe"
         usetimestamp="true" />

  </target>


  <!--=======================================================================
          target: assemble-third-party
         ====================================================================-->
  <target name="assemble-third-party"
          depends="third-party.download-check">

    <!-- copy the files to the stage dir -->
    <copy todir="${stage.dir.server}/third-party-tools/wkhtmltoimage">
      <fileset dir="${wkhtmltoimage.dir}">
      </fileset>
    </copy>


  </target>
	
	<!-- Add general libs -->
	  <target name="prepare-pentaho-lib-folder" >
		    <copy todir="${prep.pentaho.war.lib.dir}">
		      <fileset dir="${lib.dir}">
		        <include name="*.jar" />
		        <exclude name="servlet-api-*.jar" />
		        <exclude name="gwt-user-*.jar" />
		        <exclude name="mysql-connector-*.jar" />
		        <exclude name="*-sources.jar" />
		        <!-- TODO: Remove the line below when we fix the circular dependency between kettle-engine and metadata -->
		        <exclude name="hibernate-3.2.6.ga.jar" />
		      </fileset>
		    </copy>
	  </target>

  <!-- =================================
          target: assemble-pentaho-webapp
         ================================= -->
  <target name="assemble-pentaho-webapp" depends="assemble-tomcat,resolve-solutions">
    <!-- Copy the base configuration -->
    <copy todir="${stage.dir.server}">
      <fileset dir="${package.res.dir}/biserver">
        <exclude name="**/WEB-INF/default-object.xml" />
        <exclude name="**/WEB-INF/jboss-app.xml" />
        <exclude name="**/WEB-INF/jboss-portlet.xml" />
        <exclude name="**/WEB-INF/jboss-web.xml" />
        <exclude name="**/WEB-INF/portlet-instances.xml" />
      </fileset>
    </copy>

    <!-- Explode the user-console generated files -->
    <unzip dest="${prep.pentaho.war.dir}">
      <fileset dir="${lib.dir}" includes="pentaho-user-console-package-*.zip" />
    </unzip>

    <!-- Add general libs -->
    <copy todir="${prep.pentaho.war.lib.dir}">
      <fileset dir="${lib.dir}">
        <include name="*.jar" />
        <exclude name="servlet-api-*.jar" />
        <exclude name="gwt-user-*.jar" />
        <exclude name="mysql-connector-*.jar" />
        <exclude name="*-sources.jar" />
        <!-- TODO: Remove the line below when we fix the circular dependency between kettle-engine and metadata -->
        <exclude name="hibernate-3.2.6.ga.jar" />
      </fileset>
    </copy>

    <!-- Add manifest -->
    <mkdir dir="${prep.pentaho.war.meta.dir}" />
    <manifest file="${prep.pentaho.war.meta.dir}/MANIFEST.MF">
      <attribute name="Implementation-Title" value="${impl.title}" />
      <attribute name="Implementation-Version" value="${impl.version}" />
      <attribute name="Implementation-Vendor" value="${impl.vendor}" />
    </manifest>

    <!-- Add rdbms context -->
    <copy file="${datasource.res.dir}/${rdbms}/context.xml" todir="${prep.pentaho.war.meta.dir}" />

    <!-- copy db specific changes into system -->
    <copy todir="${stage.dir.solutions}/system" overwrite="true">
      <fileset dir="${system.solution.dir}/dialects/${rdbms}">
        <include name="**/**" />
      </fileset>
    </copy>

    <!-- install solution archives -->
    <unzip dest="${plugin-samples.solution.dir}" overwrite="true">
      <fileset file="${solution-archives.dir}/*.zip" />
    </unzip>
    <!-- Set the visible value of the plugin-sample dirs -->
    <set-solution-visibility dir="${plugin-samples.solution.dir}" visible="${plugin-samples.visible}" />

      <!-- Add libraries to the sample data -->
    <antcall target="resolve-sampledata-libs"/>

  </target>


  <!--====================================================
          macrodef: set-solution-visibility          
          
          Sets the visible attribute for a pentaho solution
          directory.
        ==================================================-->
  <macrodef name="set-solution-visibility">
    <attribute name="dir" />
    <attribute name="visible" default="true" />
    <sequential>
      <!-- Set the visible value of the specified directory -->
      <!--  ... replace <visible>...</visible> with <visible>@{visible}</visible> -->
      <echo message="Setting visibility=@{visible} for directory [@{dir}]..." />
      <replaceregexp file="@{dir}/index.xml"
                     match="&lt;visible&gt;.*&lt;/visible&gt;"
                     replace="&lt;visible&gt;@{visible}&lt;/visible&gt;" />
    </sequential>
  </macrodef>


  <!-- =================================
          target: install-resources
         ================================= -->
  <target name="install-resources" />


  <!-- =================================
          target: install-solutions
         ================================= -->
  <target name="install-solutions" />


  <!-- =================================
          target: update-solutions
         ================================= -->
  <target name="update-solutions">

      <!-- Set the visible value of the sample dirs -->
      <set-solution-visibility dir="${stage.dir.solutions}/bi-developers" visible="${bi-developers.visible}" />

      <zip destfile="${stage.dir.solutions}/system/default-content/samples.zip">
      	<fileset dir="${stage.dir.solutions}/system/default-content/samples"/>
      </zip>
  	
  	  <delete dir="${stage.dir.solutions}/system/default-content/samples"/>
	  	
  </target>

  <!-- =================================
          target: install-plugins                      
         ================================= -->
  <target name="install-plugins" depends="resolve-plugins">
    <unzip dest="${stage.dir.solutions}/system" overwrite="true">
      <fileset file="${plugins.dir}/*.zip" />
    </unzip>
  </target>

  <!-- - - - - - - - - - - - - - - - - -
  target: install-kettle-plugins
  - - - - - - - - - - - - - - - - - -->
  <target name="install-kettle-plugins" depends="resolve-kettle-plugins">
    <unzip dest="${kettle-plugins.dir}" overwrite="true">
      <fileset file="${kettle-plugins.stage.dir}/*.zip" />
    </unzip>
  </target>



  <!--=======================================================================
		        unified-platform-javadoc
		    
		        cleans, resolves, generates and copies all platform javadocs serially.  This
		        target also creates the unified zip/tar of the sources as well.
		        Note the release process depends on this target working this way, please
		        talk to the release manager if you need to change this target.
		        ====================================================================-->

  <property name="bi.javadoc.list"
            value="../${prefix}bi-platform-api,
										 ${bi.platform.util.dir},
										 ../${prefix}bi-platform-engine-core,
		                 ../${prefix}bi-platform-test-foundation,
										 ../${prefix}bi-platform-engine-security,
										 ${bi.platform.engine.services.dir},
		 								 ${bi.platform.data.access.dir},
										 ${bi.platform.repository.dir},
										 ../${prefix}bi-platform-ui-foundation,
										 ${bi.platform.plugin.actions.dir},
										 ../${prefix}bi-platform-scheduler,
										 ${bi.platform.web.dir},
										 ${bi.platform.web.servlet.dir}" />

  <!-- Setup the javadoc classpath -->
  <path id="jdoc.classpath">
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="../user-console/lib">
      <include name="*.jar" />
    </fileset>
  </path>

  <target name="unified-platform-javadoc"
          description="Generates unified javadoc source documentation for the open bi platform">
    <sequential>
      <delete dir="${unified.javadoc.dir}" />
      <property name="unified.javadoc.dir" value="${basedir}/javadoc/bi_platform" />
      <mkdir dir="${unified.javadoc.dir}/src" />
      <property name="unified.javadoc.src" value="${unified.javadoc.dir}/src" />
      <property name="java.incl" value="**/*.java" />
      <property name="test.excl" value="**/test/**" />
      <property name="com.excl" value="**/com/**" />

      <!-- iterate through the module list and copy src -->

      <for list="${bi.javadoc.list}" param="module" trim="true">
        <sequential>
          <copy todir="${unified.javadoc.src}">
            <fileset dir="@{module}/src">
              <include name="${java.incl}" />
              <exclude name="${test.excl}" />
              <exclude name="${com.excl}" />
            </fileset>
            <fileset dir="../user-console/source">
              <include name="${java.incl}" />
              <exclude name="${test.excl}" />
              <exclude name="${com.excl}" />
            </fileset>
          </copy>
        </sequential>
      </for>
      <javadoc destdir="${unified.javadoc.dir}"
               access="public"
               source="1.5"
               use="true"
               notree="false"
               nonavbar="false"
               noindex="false"
               splitindex="true"
               author="true"
               version="true"
               sourcepath="${unified.javadoc.src}"
               packagenames="org.pentaho.*"
               maxmemory="256M"
               nodeprecatedlist="false"
               nodeprecated="false"
               doctitle="Pentaho BI Platform documentation">
        <classpath refid="jdoc.classpath" />
        <link href="http://java.sun.com/j2se/1.5.0/docs/api/" />
      </javadoc>
      <move todir="${basedir}/dist/bi-server-ce-${project.revision}-all-sources" dir="${unified.javadoc.dir}">
        <fileset dir="${unified.javadoc.src}" />
      </move>
      <zip destfile="bi-server-ce-${project.revision}-all-sources.zip"
           basedir="${dist.dir}/bi-server-ce-${project.revision}-all-sources" />
      <delete dir="${dist.dir}/bi-server-ce-${project.revision}-all-sources" />
    </sequential>
  </target>

  <target name="resolve-sampledata-libs" depends="resolve-init">
    <mkdir dir="${stage.sampledata.lib.dir}" />
    <ivy:resolve file="${ivyfile}" conf="sampledata-libs" />
    <ivy:retrieve conf="sampledata-libs" pattern="${stage.sampledata.lib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

	<!-- ===================================================================
		  target: init-pentaho-wars

		  This target makes replacements for database host, port, username, and password keys
		  in the hibernate.cfg.xml files and the datasoure files used by
		  jboss. This is what makes your pentaho war database specific.
		  Check the build.properties file for the default replacements values.
		  You can override these if you'd like. Note that this file looks for
		  the defaults. If you are using this target as part of the manual
		  deployments, the files in the pentaho-res folder should not be modified
		  by the build. The entire folder is copied to the /build folder, and the
		  replacements are made there. This way, the manual deployments package
		  stays clean, and you can run the build multiple times with different
		  values for the host, port, usernames, and passwords.
		 =================================================================== -->
	<target name="init-pentaho-wars">
		<mkdir dir="${pentaho.wars.dir}" />
	</target>

	<!-- ===================================================================
	        target: war-pentaho
	       =================================================================== -->
	<target name="war-pentaho" depends="init, init-pentaho-wars, zip-pentaho-style-war">
		<mkdir dir="${dist.dir}" />

		<manifest file="${dist.dir}/MANIFEST.MF">
			<attribute name="Implementation-Title" value="${impl.title}" />
			<attribute name="Implementation-Version" value="${impl.version}" />
			<attribute name="Implementation-Vendor" value="${impl.vendor}" />
		</manifest>

		<!-- war pentaho -->
		<zip destfile="${dist.dir}/pentaho.war" duplicate="preserve">
			<zipfileset dir="${prep.pentaho.war.dir}">
				<exclude name="**/WEB-INF/default-object.xml" />
				<exclude name="**/WEB-INF/jboss-app.xml" />
				<exclude name="**/WEB-INF/jboss-portlet.xml" />
				<exclude name="**/WEB-INF/jboss-web.xml" />
				<exclude name="**/WEB-INF/portlet-instances.xml" />
			</zipfileset>
		</zip>
		<!--copy install doc to the dist folder -->
		<copy todir="${dist.dir}">
			<fileset dir="${install-doc.dir}">
				<include name="*.*" />
			</fileset>
		</copy>
	</target>

	<!-- ===================================================================
	       target: zip-pentaho-style-war

	       Create the pentaho-style.war.
	      =================================================================== -->
	<target name="zip-pentaho-style-war" depends="init">
		<zip destfile="${dist.dir}/pentaho-style.war">
			<zipfileset dir="${pentaho-style.dir}" />
		</zip>
	</target>

	<!-- ===================================================================
	       target: zip-pentaho-data

	       Create the pentaho-data.zip
	      =================================================================== -->
	<target name="zip-pentaho-data" depends="init">
		<zip destfile="${dist.dir}/pentaho-data.zip">
			<zipfileset dir="${stage.dir.data}"   prefix="data"/>
		</zip>
	</target>
		
	<!-- ===================================================================
	       target: zip-pentaho-solutions

	       Create the pentaho-solutions.zip
	      =================================================================== -->
	<target name="zip-pentaho-solutions" depends="init">
		<zip destfile="${dist.dir}/pentaho-solutions.zip">
			<zipfileset dir="${stage.dir.solutions}" prefix="pentaho-solutions"/>
		</zip>
	</target>

</project>
