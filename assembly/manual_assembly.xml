<project name="Open_Manual_Assembly" basedir="." default="" xmlns:ivy="antlib:org.apache.ivy.ant">

  <property file="override.properties"
            description="Properties customized for your particular assembly environment belong in this file." />
  <property file="manual_assembly.properties" description="Default properties belong in this file." />

  <!-- subfloor / assembly property overrides -->
  <property name="package-res-manual.dir" value="${basedir}/package-res/manual-deployment" />
  <property name="stage.dir" value="bin/manual-stage" />

  <property name="plugins.dir" value="plugins" />
  <property name="solution-archives.dir" value="solution-archives" />

  <!-- set license dir here before we import assembly_shared.xml since subfloor will set it also -->
  <property name="pkg.res.dir" value="${basedir}/package-res" />
  <property name="license.dir" value="${pkg.res.dir}/biserver/licenses" />
  <property name="manual-deployment.res.dir" value="${pkg.res.dir}/manual-deployment/pentaho-res" />
  <property name="pkg.sampledata.dir" value="${pkg.res.dir}/biserver/data" />
  <property name="pkg.pentaho-solutions.dir" value="${pkg.res.dir}/biserver/pentaho-solutions" />
  <property name="pkg.webapp.dir" value="${pkg.res.dir}/biserver/tomcat/webapps"/>
  <property name="pkg.pentaho.webapp.dir" value="${pkg.webapp.dir}/pentaho" />
  <property name="pkg.pentaho.webapp.classes.dir" value="${pkg.pentaho.webapp.dir}/WEB-INF/classes" />


  <!-- Import the ant script that includes targets share between manual and archive-based assemblies -->
  <import file="build-res/assembly_shared.xml" />

  <property name="bi.platform.util.dir" value="../bi-platform-util" />
  <property name="bi.platform.engine.core.dir" value="../bi-platform-engine-core" />
  <property name="bi.platform.engine.services.dir" value="../bi-platform-engine-services" />
  <property name="bi.platform.engine.security.dir" value="../bi-platform-engine-security" />
  <property name="bi.platform.repository.dir" value="../bi-platform-repository" />
  <property name="bi.platform.ui.foundation.dir" value="../bi-platform-ui-foundation" />
  <property name="bi.platform.scheduler.dir" value="../bi-platform-scheduler" />
  <property name="bi.platform.plugin.actions.dir" value="../bi-platform-plugin-actions" />
  <property name="bi.platform.plugin.services.dir" value="../bi-platform-plugin-services" />
  <property name="bi.platform.sample.data.dir" value="../bi-platform-sample-data" />
  <property name="bi.platform.sample.solution.dir" value="../bi-platform-sample-solution" />
  <property name="bi.platform.appserver.dir" value="../bi-platform-appserver" />
  <property name="bi.platform.web.dir" value="../bi-platform-web" />
  <property name="bi.platform.web.servlet.dir" value="../bi-platform-web-servlet" />
  <property name="bi.platform.security.userroledao.dir" value="../bi-platform-security-userroledao" />
  <property name="third-party.dir" value="${subfloor.resources.dir}/third-party" description="Directory where 3rd party tools are included in the platform assemblies" />
  <property name="wkhtmltoimage.dir" value="${third-party.dir}/wkhtmltoimage" description="Directory where wkhtmltoimage is downloaded"/>

  <target name="package" depends="package-zip" description="Creates a j2ee manual deployments package" />

  <target name="assemble-no-plugins"
          depends="assemble.init,check-blacklist,assemble-message-bundles,assemble-licenses,assemble-jars,assemble-resource-files,assemble-webapps,assemble-solutions,prepare-custom-solutions,assemble-third-party,do-assemble"
          description="Assembles a j2ee manual deployments package without plugins" />

  <target name="assemble"
          depends="assemble.init,check-blacklist,assemble-message-bundles,assemble-licenses,assemble-jars,assemble-resource-files,assemble-webapps,assemble-solutions,assemble-plugins,prepare-custom-solutions,assemble-third-party,do-assemble"
          description="Assembles a j2ee manual deployments package" />

  <target name="do-assemble">
    <!-- copy package-res-manual stuff into stage dir -->
    <copy todir="${approot.stage.dir}">
      <fileset dir="${pkg.res.dir}/manual-deployment">
        <include name="*.*"/>
      </fileset>
    </copy>

    <!-- create version.properties -->
    <propertyfile file="${approot.stage.dir}/version.properties" comment="Pentaho Manual Deployments build information">
      <entry key="impl.vender" value="Pentaho" />
      <entry key="impl.vender" value="Pentaho Manual Deployments" />
      <entry key="impl.version" value="${project.revision}" />
      <entry key="impl.builddate" type="date" value="now" />
    </propertyfile>

    <antcall target="create-production-webxml" />
  </target>

  <!-- ================================= 
          target: clean-all (override)         
         ================================= -->
  <target name="clean-all" depends="subfloor.clean-all">
    <delete dir="${plugins.dir}" />
    <delete dir="${solution-archives.dir}" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble-message-bundles                      
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-message-bundles">
    <unzip dest="${approot.stage.dir}/pentaho-classes">
      <patternset>
        <include name="**/messages*properties"/>
      </patternset>
      <fileset dir="${lib.dir}">
        <include name="pentaho-bi-platform-*.jar"/>
        <include name="pentaho-platform-*.jar"/>
      </fileset>
    </unzip>
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble-licenses                      
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-licenses">
    <mkdir dir="${approot.stage.dir}/pentaho-doc" />
    <copy todir="${approot.stage.dir}/pentaho-doc/licenses">
      <fileset dir="${license.dir}" />
    </copy>
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble-jars                      
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-jars">
    <!--  copy over bi-platform jars -->
    <copy todir="${approot.stage.dir}/pentaho-jars">
      <fileset dir="${lib.dir}">
        <include name="pentaho-bi-platform-*.jar" />
        <include name="pentaho-platform-*.jar"/>
      </fileset>
    </copy>

    <!--  copy over non bi-platform jars -->
    <copy todir="${approot.stage.dir}/pentaho-third-party">
      <fileset dir="${lib.dir}">
        <include name="*.jar" />
        <exclude name="pentaho-bi-platform-*.jar" />
        <exclude name="pentaho-platform-*.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble-resource-files                      
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-resource-files">
    <!--  ear related files -->
    <copy todir="${approot.stage.dir}/pentaho-res">
      <fileset dir="${manual-deployment.res.dir}" />
    </copy>

    <!--  ehcache related config -->
    <copy todir="${approot.stage.dir}/pentaho-res/ehcache">
      <fileset dir="${pkg.pentaho.webapp.classes.dir}" >
        <include name="ehcache.xml"/>
      </fileset>
    </copy>

    <!-- jboss datasources -->
    <copy todir="${approot.stage.dir}/pentaho-res/jboss">
      <fileset dir="${pkg.res.dir}/appserver/jboss/res" />
    </copy>

    <!-- jfreereport files -->
    <copy todir="${approot.stage.dir}/pentaho-res/jfreereport">
      <fileset dir="${pkg.pentaho.webapp.classes.dir}" >
        <include name="classic-engine.properties"/>
        <include name="loader.properties"/>
      </fileset>
    </copy>

    <!-- mondrian files -->
    <copy todir="${approot.stage.dir}/pentaho-res/mondrian">
      <fileset dir="${pkg.pentaho.webapp.classes.dir}" >
        <include name="mondrian.properties"/>
      </fileset>
    </copy>

    <!-- log4j files -->
    <copy todir="${approot.stage.dir}/pentaho-res/log4j">
      <fileset dir="${pkg.pentaho.webapp.classes.dir}" >
        <include name="log4j.*"/>
      </fileset>
    </copy>

    <!--  orion files -->
    <copy todir="${approot.stage.dir}/pentaho-res/orion">
      <fileset dir="${pkg.res.dir}/appserver/orion/res" />
    </copy>

  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: create-production-webxml    
            Here we are removing the sample servlet sections from the web.xml.  It is very
    		important that those sections be kept pure of any servlets other than samples, such as 
    		servlets that are required for system operation.  The sample servlets sections in the web.xml must
    		be bounded by '[BEGIN SAMPLE SERVLETS]' to '[END SAMPLE SERVLETS]' and 
    		'[BEGIN SAMPLE SERVLET MAPPINGS]' to '[END SAMPLE SERVLET MAPPINGS]'            
         - - - - - - - - - - - - - - - - - -->
  <target name="create-production-webxml">
    <loadfile srcfile="${approot.stage.dir}/pentaho-webapp/WEB-INF/web.xml"
              property="web-xml-file"
              failonerror="true" />
    
    <antcall target="scrub-hsqldb"/>
    
    </target>
  
  <target name="scrub-hsqldb">
    <propertyregex property="hsqldb.starter"
                   input="${web-xml-file}"
                   regexp="\[BEGIN HSQLDB STARTER\]"
                   select="\0" />
                     
    <fail message="HSQLDB STARTER section not found in web.xml!">
      <condition>
        <not>
          <isset property="hsqldb.starter" />
        </not>
      </condition>
    </fail>

    <replaceregexp file="${approot.stage.dir}/pentaho-webapp/WEB-INF/web.xml"
                   flags="s"
                   match="\[BEGIN HSQLDB STARTER\].*\[END HSQLDB STARTER\]"
                   replace="[HSQLDB STARTER GOES HERE]" />
    
    
    
    <propertyregex property="hsqldb.databases"
                   input="${web-xml-file}"
                   regexp="\[BEGIN HSQLDB DATABASES\]"
                   select="\0" />
                     
    <fail message="HSQLDB DATABASES section not found in web.xml!">
      <condition>
        <not>
          <isset property="hsqldb.databases" />
        </not>
      </condition>
    </fail>

    <replaceregexp file="${approot.stage.dir}/pentaho-webapp/WEB-INF/web.xml"
                   flags="s"
                   match="\[BEGIN HSQLDB DATABASES\].*\[END HSQLDB DATABASES\]"
                   replace="[HSQLDB DATABASES GOES HERE]" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble-webapps                      
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-webapps" depends="install-antcontrib">
    <copy todir="${approot.stage.dir}/pentaho-webapp">
      <fileset dir="${pkg.pentaho.webapp.dir}">
        <exclude name="**/classes/classic-engine.properties" />
        <exclude name="**/classes/ehcache.xml"/>
        <exclude name="**/classes/loader.properties" />
        <exclude name="**/classes/log4j.*"/>
        <exclude name="**/classes/mondrian.properties"/>
      </fileset>
    </copy>

    <unzip dest="${approot.stage.dir}/pentaho-webapp">
      <fileset dir="${lib.dir}" includes="pentaho-user-console-package-*.zip" />
    </unzip>

    <copy todir="${approot.stage.dir}/pentaho-res/styles/pentaho-style.war">
      <fileset dir="${pkg.webapp.dir}/pentaho-style" />
    </copy>

    <mkdir dir="${approot.stage.dir}/custom-pentaho-webapp/META-INF" />
    <mkdir dir="${approot.stage.dir}/custom-pentaho-webapp/WEB-INF" />
    <mkdir dir="${approot.stage.dir}/custom-ear" />
  </target>


  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble-plugins                     
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-plugins" depends="resolve-plugins">
    <unzip dest="${approot.stage.dir}/pentaho-solutions/system" overwrite="true">
      <fileset file="${plugins.dir}/*.zip" />
    </unzip>
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: prepare-custom-solutions                      
         - - - - - - - - - - - - - - - - - -->
  <target name="prepare-custom-solutions" />

  <!-- - - - - - - - - - - - - - - - - - 
          target: assemble-solutions: install only those solution archives that are required for system operation                      
         - - - - - - - - - - - - - - - - - -->
  <target name="assemble-solutions" depends="resolve-solutions">
    <copy todir="${approot.stage.dir}/pentaho-data">
      <fileset dir="${pkg.sampledata.dir}"/>
    </copy>

    <mkdir dir="${approot.stage.dir}/pentaho-data/lib" />
    <ivy:resolve file="${ivyfile}" conf="sampledata-libs" />
    <ivy:retrieve conf="sampledata-libs" pattern="${approot.stage.dir}/pentaho-data/lib/[module]-[revision](-[classifier]).[ext]" />

    <!-- create pentaho-solutions folder -->
    <mkdir dir="${approot.stage.dir}/pentaho-solutions/tmp" />

    <!-- copy over default system solution, but no samples -->
    <copy todir="${approot.stage.dir}/pentaho-solutions" overwrite="true">
      <fileset dir="${pkg.pentaho-solutions.dir}">
        <exclude name="**/bi-developers**"/>
        <exclude name="**/steel-wheels**"/>
      </fileset>
    </copy>

    <!-- install solution archives -->
    <unzip dest="${approot.stage.dir}/pentaho-solutions" overwrite="true">
      <fileset file="${solution-archives.dir}/pentaho-cdf-solution*.zip" />
    </unzip>
  </target>

  <!--=======================================================================
		      target: third-party.download-check
	         ====================================================================-->
  <target name="third-party.download-check"
          description="Fetches third part tools if it is not already present">

    <condition property="wkhtmltoimage.available">
      <available file="${wkhtmltoimage.dir}" />
    </condition>
    <antcall target="wkhtmltoimage.download" />

  </target>

  <!--=======================================================================
             target: wkhtmltoimage.download
            ====================================================================-->
  <target name="wkhtmltoimage.download"
          unless="wkhtmltoimage.available"
          description="Fetches third-party tools">

    <mkdir dir="${wkhtmltoimage.dir}" />

    <!-- get the mac version -->
    <get src="http://wkhtmltopdf.googlecode.com/files/wkhtmltoimage-OSX-0.10.0_rc2-static.tar.bz2"
         dest="${wkhtmltoimage.dir}/wkhtmltoimage_mac.tar.bz2"
         usetimestamp="true" />

    <!-- get the linux amd64 version -->
    <get src="http://wkhtmltopdf.googlecode.com/files/wkhtmltoimage-0.10.0_rc2-static-amd64.tar.bz2"
         dest="${wkhtmltoimage.dir}/wkhtmltoimage_linux_amd64.tar.bz2"
         usetimestamp="true" />

    <!-- get the linux i386 version -->
    <get src="http://wkhtmltopdf.googlecode.com/files/wkhtmltoimage-0.10.0_rc2-static-i386.tar.bz2"
         dest="${wkhtmltoimage.dir}/wkhtmltoimage_linux_i386.tar.bz2"
         usetimestamp="true" />

    <!-- get the windows version -->
    <get src="http://wkhtmltopdf.googlecode.com/files/wkhtmltox-0.10.0_rc2-installer.exe"
         dest="${wkhtmltoimage.dir}/wkhtmltoimage_windows_installer.exe"
         usetimestamp="true" />

  </target>


  <!--=======================================================================
             target: assemble-third-party
            ====================================================================-->
  <target name="assemble-third-party"
          depends="third-party.download-check">

    <!-- copy the files to the stage dir -->
    <copy todir="${stage.dir.server}/third-party-tools/wkhtmltoimage">
      <fileset dir="${wkhtmltoimage.dir}">
      </fileset>
    </copy>


  </target>

</project>
