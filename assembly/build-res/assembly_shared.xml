<project name="assembly_shared" xmlns:ivy="antlib:org.apache.ivy.ant">
  <!-- Import the subfloor-pkg.xml file which contains all the default tasks -->
  <import file="subfloor-pkg.xml" />
  
  <!--
    ======================================================================= check-blacklist searches for illegal classes
    that we have fetched via IVY and fail the assembly if they are present.
    ====================================================================
  -->
  <target name="check-blacklist" depends="remove-servlet-api">

    <available property="Servlet.class.present" classname="javax.servlet.Servlet">
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="**/*.jar" />
        </fileset>
      </classpath>
    </available>
    <fail if="Servlet.class.present" message="!!! Blacklisted class javax.servlet.Servlet found in a retrieved jar.  Assembly cannot proceed !!!" />
  </target>

  <target name="remove-servlet-api" depends="test-servlet-api-exists" if="servlet-api-exists">
    <echo message="WARNING: servlet-api-*.jar is in the lib directory! Removing..." />
    <delete failonerror="true">
      <fileset dir="${lib.dir}" includes="**/servlet-api-*.jar" />
    </delete>
  </target>

  <target name="test-servlet-api-exists">
    <pathconvert property="servlet-api-exists" setonempty="false" pathsep=" ">
      <path>
        <fileset dir="${lib.dir}" includes="servlet-api-*.jar" />
      </path>
    </pathconvert>
  </target>
	
	<!-- - - - - - - - - - - - - - - - - - 
	          Macro for making resolving ivy a 1 liner.  Tasks using this must depend on install-ivy.                      
	         - - - - - - - - - - - - - - - - - -->
  <macrodef name="ivy-resolve">
  	<attribute name="ivyfile" default="${ivyfile}" />
  	<attribute name="conf" default="default" />
  	<attribute name="directory"/>
  	<sequential>
  		<mkdir dir="@{directory}" />
  		<ivy:resolve file="@{ivyfile}" conf="@{conf}" />
        <ivy:retrieve conf="@{conf}" pattern="@{directory}/[module]-[revision](-[classifier]).[ext]" />
  	</sequential>
  </macrodef>
  
  <!-- - - - - - - - - - - - - - - - - - 
          target: resolve-plugins                      
         - - - - - - - - - - - - - - - - - -->
  <target name="resolve-plugins" depends="install-ivy">
  	<ivy-resolve conf="plugin" directory="${basedir}/${plugins.dir}" />
  </target>


  <!-- - - - - - - - - - - - - - - - - -
    target: resolve-kettle-plugins
  - - - - - - - - - - - - - - - - - -->
  <target name="resolve-kettle-plugins" depends="install-ivy">
  	<ivy-resolve conf="kettle-plugin" directory="${kettle-plugins.stage.dir}" />
  </target>

  <!-- - - - - - - - - - - - - - - - - - 
          target: resolve-datasource-libs
         - - - - - - - - - - - - - - - - - -->
  <target name="resolve-datasource-libs" depends="install-ivy">
  	<ivy-resolve conf="datasource-libs" directory="${container.lib.dir}" />
  </target>


  <!-- - - - - - - - - - - - - - - - - - 
          target: resolve-solutions                     
         - - - - - - - - - - - - - - - - - -->
  <target name="resolve-solutions" depends="install-ivy">
  	<ivy-resolve conf="solution" directory="${basedir}/${solution-archives.dir}" />
  </target>
</project>